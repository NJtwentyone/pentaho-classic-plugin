"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const MuiDialogTitle = require("@mui/material/DialogTitle");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const iconVariant = require("../../utils/iconVariant.cjs");
const Title_styles = require("./Title.styles.cjs");
const context = require("../context.cjs");
const Typography = require("../../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiDialogTitle__default = /* @__PURE__ */ _interopDefault(MuiDialogTitle);
const HvDialogTitle = (props) => {
  const {
    classes: classesProp,
    className,
    children,
    variant = "default",
    showIcon = true,
    customIcon = null,
    ...others
  } = useDefaultProps.useDefaultProps("HvDialogTitle", props);
  const { classes, css, cx } = Title_styles.useClasses(classesProp);
  const { fullscreen } = context.useDialogContext();
  const isString = typeof children === "string";
  const icon = customIcon || showIcon && iconVariant.iconVariant(variant);
  return /* @__PURE__ */ jsxRuntime.jsx(
    MuiDialogTitle__default.default,
    {
      className: cx(
        !fullscreen && css({ flex: 1 }),
        classes.root,
        {
          [classes.fullscreen]: fullscreen
        },
        className
      ),
      ...others,
      children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.messageContainer, children: [
        icon,
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx({ [classes.textWithIcon]: !!icon }), children: !isString ? children : /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "title4", className: classes.titleText, children }) })
      ] })
    }
  );
};
exports.dialogTitleClasses = Title_styles.staticClasses;
exports.HvDialogTitle = HvDialogTitle;
