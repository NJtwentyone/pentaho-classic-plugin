"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const keyboardUtils = require("../../utils/keyboardUtils.cjs");
const setId = require("../../utils/setId.cjs");
const ScrollToVertical_styles = require("./ScrollToVertical.styles.cjs");
const useScrollTo = require("../useScrollTo.cjs");
const VerticalScrollListItem = require("./VerticalScrollListItem/VerticalScrollListItem.cjs");
const HvScrollToVertical = (props) => {
  const {
    id,
    defaultSelectedIndex = 0,
    scrollElementId,
    href = true,
    navigationMode = href ? "push" : "none",
    relativeLinks = false,
    onChange,
    onClick,
    onEnter,
    className,
    classes: classesProp,
    options,
    offset = 0,
    position = "relative",
    tooltipPosition = "left",
    style,
    ...others
  } = useDefaultProps.useDefaultProps("HvScrollToVertical", props);
  const { classes, cx } = ScrollToVertical_styles.useClasses(classesProp);
  const elementId = useUniqueId.useUniqueId(id, "hvVerticalScrollto");
  const [selectedIndex, setScrollTo, elements] = useScrollTo.useScrollTo(
    defaultSelectedIndex,
    scrollElementId,
    navigationMode,
    relativeLinks,
    offset,
    options,
    onChange
  );
  const handleSelection = (event, value, index) => {
    event.preventDefault();
    const wrappedOnChange = () => {
      onChange?.(event, index);
    };
    setScrollTo(event, value, index, wrappedOnChange);
  };
  const tabs = elements.map((option, index) => /* @__PURE__ */ jsxRuntime.jsx(
    VerticalScrollListItem.HvVerticalScrollListItem,
    {
      id: setId.setId(elementId, `item-${index}`),
      onClick: (event) => {
        if (navigationMode !== "none") {
          event.preventDefault();
        }
        handleSelection(event, option.value, index);
        onClick?.(event, index);
      },
      onKeyDown: (event) => {
        if (keyboardUtils.isKey(event, "Enter") === true) {
          if (navigationMode !== "none") {
            event.preventDefault();
          }
          handleSelection(event, option.value, index);
          onEnter?.(event, index);
        }
      },
      href: navigationMode !== "none" ? option.href : void 0,
      tooltipPlacement: tooltipPosition,
      selected: selectedIndex === index,
      label: option.label
    },
    option.key || option.label
  ));
  const positionOffset = ScrollToVertical_styles.calculateOffset(options.length);
  return /* @__PURE__ */ jsxRuntime.jsx(
    "ol",
    {
      className: cx(
        classes.root,
        {
          [classes.positionFixed]: position === "fixed",
          [classes.positionAbsolute]: position === "absolute"
        },
        className
      ),
      style: { top: `calc(50% - ${positionOffset}px)`, ...style },
      id: elementId,
      ...others,
      children: tabs
    }
  );
};
exports.scrollToVerticalClasses = ScrollToVertical_styles.staticClasses;
exports.HvScrollToVertical = HvScrollToVertical;
