"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const uikitStyles = require("@hitachivantara/uikit-styles");
const Chip = require("@mui/material/Chip");
const focusUtils = require("../utils/focusUtils.cjs");
const classes = require("../utils/classes.cjs");
const { staticClasses, useClasses } = classes.createClasses("HvTag", {
  root: {
    color: uikitStyles.theme.colors.base_dark,
    [`& .${Chip.chipClasses.avatar}`]: {
      width: 12,
      height: 12,
      marginLeft: 2,
      marginRight: 0
    }
  },
  chipRoot: {
    [`&.${Chip.chipClasses.root}`]: {
      height: 16,
      borderRadius: 0,
      maxWidth: 180,
      fontFamily: uikitStyles.theme.fontFamily.body,
      "&:focus-visible": {
        backgroundColor: uikitStyles.theme.alpha("base_light", 0.3)
      },
      "&$categorical": {
        borderRadius: 8,
        "& $label": {
          color: uikitStyles.theme.colors.secondary
        }
      }
    },
    "&$disabled": {
      opacity: 1,
      backgroundColor: uikitStyles.theme.colors.atmo3,
      "& $label": {
        color: uikitStyles.theme.colors.secondary_60
      }
    },
    [`& .${Chip.chipClasses.label}`]: {
      paddingLeft: 4,
      paddingRight: 4,
      ...uikitStyles.theme.typography.caption2,
      color: "currentcolor"
    },
    [`& .${Chip.chipClasses.deleteIcon}`]: {
      margin: 0,
      width: 16,
      height: 16,
      padding: 0,
      color: "currentColor",
      "& svg .color0": {
        fill: "currentcolor"
      },
      "&:hover": {
        backgroundColor: uikitStyles.theme.colors.containerBackgroundHover,
        color: "unset"
      },
      "&:focus": {
        ...focusUtils.outlineStyles,
        borderRadius: 0
      },
      "&:focus:not(:focus-visible)": {
        outline: "0 !important",
        boxShadow: "none !important"
      }
    }
  },
  disabled: {},
  clickable: {
    cursor: "pointer",
    "&:focus-visible": {
      ...focusUtils.outlineStyles
    }
  },
  categorical: {},
  label: {},
  deleteIcon: {},
  // TODO: redundant - use deleteIcon. remove in v6
  button: {},
  tagButton: {},
  // TODO: redundant - use $clickable or :not($disabled). remove in v6
  focusVisible: {},
  disabledDeleteIcon: {},
  categoricalFocus: {},
  categoricalDisabled: {}
});
exports.staticClasses = staticClasses;
exports.useClasses = useClasses;
