"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const setId = require("../../../utils/setId.cjs");
const useDefaultProps = require("../../../hooks/useDefaultProps.cjs");
const HorizontalScrollListItem_styles = require("./HorizontalScrollListItem.styles.cjs");
const HvHorizontalScrollListItem = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    selected,
    children,
    onClick,
    onKeyDown,
    tooltipWrapper,
    href,
    ...others
  } = useDefaultProps.useDefaultProps("HvHorizontalScrollListItem", props);
  const { classes, cx } = HorizontalScrollListItem_styles.useClasses(classesProp);
  const variant = selected ? "label" : "body";
  const labelId = setId.setId(id, "label");
  const buttonId = setId.setId(id, "button");
  const Tooltip = tooltipWrapper;
  const Component = href != null ? "a" : "div";
  return /* @__PURE__ */ jsxRuntime.jsx("li", { id, className: cx(classes.root, className), "aria-current": selected, children: /* @__PURE__ */ jsxRuntime.jsx(
    Component,
    {
      id: buttonId,
      role: href == null ? "button" : void 0,
      tabIndex: 0,
      onClick,
      onKeyDown,
      className: classes.button,
      "aria-labelledby": labelId,
      href,
      ...others,
      children: /* @__PURE__ */ jsxRuntime.jsx(
        Tooltip,
        {
          id: labelId,
          className: cx(classes.text, { [classes.selected]: selected }),
          variant,
          children
        }
      )
    }
  ) });
};
exports.horizontalScrollListItemClasses = HorizontalScrollListItem_styles.staticClasses;
exports.HvHorizontalScrollListItem = HvHorizontalScrollListItem;
