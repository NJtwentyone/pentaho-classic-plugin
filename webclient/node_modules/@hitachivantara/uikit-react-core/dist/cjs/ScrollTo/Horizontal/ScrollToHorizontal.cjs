"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const styles = require("@mui/material/styles");
const useMediaQuery = require("@mui/material/useMediaQuery");
const uikitStyles = require("@hitachivantara/uikit-styles");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const useTheme = require("../../hooks/useTheme.cjs");
const keyboardUtils = require("../../utils/keyboardUtils.cjs");
const setId = require("../../utils/setId.cjs");
const withTooltip = require("../withTooltip.cjs");
const useScrollTo = require("../useScrollTo.cjs");
const ScrollToHorizontal_styles = require("./ScrollToHorizontal.styles.cjs");
const HorizontalScrollListItem = require("./HorizontalScrollListItem/HorizontalScrollListItem.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const useMediaQuery__default = /* @__PURE__ */ _interopDefault(useMediaQuery);
const HvScrollToHorizontal = (props) => {
  const {
    id,
    defaultSelectedIndex = 0,
    scrollElementId,
    href = true,
    navigationMode = href ? "push" : "none",
    relativeLinks = false,
    onChange,
    onClick,
    onEnter,
    className,
    classes: classesProp,
    options,
    offset = 0,
    position = "relative",
    tooltipPosition = "top",
    ...others
  } = useDefaultProps.useDefaultProps("HvScrollToHorizontal", props);
  const { classes, css, cx } = ScrollToHorizontal_styles.useClasses(classesProp);
  const muiTheme = styles.useTheme();
  const downSm = useMediaQuery__default.default(muiTheme.breakpoints.down("sm"));
  const upMd = useMediaQuery__default.default(muiTheme.breakpoints.up("md"));
  const { activeTheme } = useTheme.useTheme();
  const elementId = useUniqueId.useUniqueId(id, "hvHorizontalScrollto");
  const [selectedIndex, setScrollTo, elements] = useScrollTo.useScrollTo(
    defaultSelectedIndex,
    scrollElementId,
    navigationMode,
    relativeLinks,
    offset,
    options,
    onChange
  );
  const handleSelection = (event, value, index) => {
    event.preventDefault();
    const wrappedOnChange = () => {
      onChange?.(event, index);
    };
    setScrollTo(event, value, index, wrappedOnChange);
  };
  const tooltipWrappers = React.useMemo(() => {
    return options.map((option) => {
      return withTooltip.withTooltip(option.label, "div", tooltipPosition);
    });
  }, [options, tooltipPosition]);
  const NotSelected = React.useCallback(() => {
    return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.notSelectedRoot, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.notSelected }) });
  }, [classes.notSelectedRoot, classes.notSelected]);
  const Selected = React.useCallback(() => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      uikitReactIcons.CurrentStep,
      {
        height: activeTheme?.scrollTo.dotSelectedSize,
        width: activeTheme?.scrollTo.dotSelectedSize,
        className: classes.selected
      }
    );
  }, [classes.selected, activeTheme?.scrollTo.dotSelectedSize]);
  const tabs = elements.map((option, index) => {
    const selected = selectedIndex === index;
    const tooltipWrapper = tooltipWrappers[index];
    return /* @__PURE__ */ jsxRuntime.jsxs(
      HorizontalScrollListItem.HvHorizontalScrollListItem,
      {
        id: setId.setId(elementId, `item-${index}`),
        onClick: (event) => {
          if (navigationMode !== "none") {
            event.preventDefault();
          }
          handleSelection(event, option.value, index);
          onClick?.(event, index);
        },
        onKeyDown: (event) => {
          if (keyboardUtils.isKey(event, "Enter") === true) {
            if (navigationMode !== "none") {
              event.preventDefault();
            }
            handleSelection(event, option.value, index);
            onEnter?.(event, index);
          }
        },
        href: navigationMode !== "none" ? option.href : void 0,
        tooltipWrapper,
        selected,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("p", { children: option.label }),
          selected ? /* @__PURE__ */ jsxRuntime.jsx(Selected, {}) : /* @__PURE__ */ jsxRuntime.jsx(NotSelected, {})
        ]
      },
      option.key || option.label
    );
  });
  return /* @__PURE__ */ jsxRuntime.jsx(
    "ol",
    {
      className: cx(
        css({
          width: position === "fixed" && (upMd || downSm) ? `calc(100% - 2*${uikitStyles.theme.spacing(upMd ? 4 : 2)})` : "100%",
          marginTop: 0,
          marginBottom: 0,
          marginRight: position === "fixed" && (upMd || downSm) ? uikitStyles.theme.spacing(upMd ? 4 : 2) : 0,
          marginLeft: position === "fixed" && (upMd || downSm) ? uikitStyles.theme.spacing(upMd ? 4 : 2) : 0
        }),
        classes.root,
        {
          [classes.positionSticky]: position === "sticky",
          [classes.positionFixed]: position === "fixed"
        },
        className
      ),
      id: elementId,
      ...others,
      children: tabs
    }
  );
};
exports.scrollToHorizontalClasses = ScrollToHorizontal_styles.staticClasses;
exports.HvScrollToHorizontal = HvScrollToHorizontal;
