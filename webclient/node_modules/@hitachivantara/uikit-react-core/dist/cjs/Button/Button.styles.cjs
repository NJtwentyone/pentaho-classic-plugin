"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const uikitStyles = require("@hitachivantara/uikit-styles");
const focusUtils = require("../utils/focusUtils.cjs");
const classes = require("../utils/classes.cjs");
const { staticClasses, useClasses } = classes.createClasses("HvButton", {
  root: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    textTransform: "none",
    cursor: "pointer",
    minWidth: "70px",
    whiteSpace: "nowrap",
    "&:hover:not($disabled)": {
      backgroundColor: uikitStyles.theme.colors.containerBackgroundHover
    },
    "&:focus-visible": {
      ...focusUtils.outlineStyles,
      "&:not($disabled)": {
        backgroundColor: uikitStyles.theme.colors.containerBackgroundHover
      }
    },
    // Default button - no size specified
    fontFamily: uikitStyles.theme.fontFamily.body,
    fontSize: uikitStyles.theme.fontSizes.base,
    fontWeight: uikitStyles.theme.fontWeights.semibold,
    lineHeight: "11px",
    letterSpacing: 0,
    height: "32px",
    borderRadius: uikitStyles.theme.radii.base,
    padding: uikitStyles.theme.spacing("xs", "sm")
  },
  startIcon: {
    marginLeft: `calc(-1 * ${uikitStyles.theme.space.xs})`
  },
  endIcon: {
    marginRight: `calc(-1 * ${uikitStyles.theme.space.xs})`
  },
  focusVisible: {},
  disabled: {
    color: uikitStyles.theme.colors.secondary_60,
    borderColor: uikitStyles.theme.colors.atmo4,
    backgroundColor: uikitStyles.theme.colors.atmo3,
    cursor: "not-allowed"
  },
  icon: {
    margin: 0,
    padding: 0,
    height: "fit-content",
    minWidth: "unset"
  },
  primary: {
    color: uikitStyles.theme.colors.atmo1,
    backgroundColor: uikitStyles.theme.colors.primary,
    "&:not($disabled)": {
      "&:hover, &:focus-visible": {
        backgroundColor: uikitStyles.theme.colors.primary_80
      }
    }
  },
  primarySubtle: {
    color: uikitStyles.theme.colors.primary,
    backgroundColor: "transparent",
    border: "1px solid currentColor"
  },
  primaryGhost: {
    color: uikitStyles.theme.colors.primary,
    backgroundColor: "transparent",
    "&$disabled": {
      backgroundColor: "transparent"
    }
  },
  secondarySubtle: {
    color: uikitStyles.theme.colors.secondary,
    backgroundColor: "transparent",
    border: "1px solid currentColor"
  },
  secondaryGhost: {
    color: uikitStyles.theme.colors.secondary,
    backgroundColor: "transparent",
    "&$disabled": {
      backgroundColor: "transparent"
    }
  },
  semantic: {
    color: uikitStyles.theme.colors.base_dark,
    backgroundColor: "transparent",
    "&:not($disabled)": {
      "&:hover, &:focus-visible": {
        backgroundColor: "rgba(251, 252, 252, 0.3)"
      }
    },
    "&$disabled": {
      backgroundColor: "rgba(251, 252, 252, 0.1)"
    }
  },
  secondary: {},
  ghost: {}
});
const getRadiusStyles = (radius) => ({
  borderRadius: uikitStyles.theme.radii[radius]
});
const getSizeStyles = (size) => ({
  height: uikitStyles.theme.sizes[size],
  paddingLeft: uikitStyles.theme.space[size],
  paddingRight: uikitStyles.theme.space[size],
  // @ts-ignore TODO: align font<-> button sizes
  fontSize: uikitStyles.theme.fontSizes[size]
});
const getOverrideColors = () => ({
  "& svg .color0": {
    fill: "currentcolor"
  }
});
exports.getOverrideColors = getOverrideColors;
exports.getRadiusStyles = getRadiusStyles;
exports.getSizeStyles = getSizeStyles;
exports.staticClasses = staticClasses;
exports.useClasses = useClasses;
