{"version":3,"file":"useRowSelection.cjs","sources":["../../../../src/Table/hooks/useRowSelection.tsx"],"sourcesContent":["import { ChangeEvent, useCallback, useMemo } from \"react\";\nimport {\n  Hooks,\n  IdType,\n  PropGetter,\n  Row,\n  actions,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n  makePropGetter,\n} from \"react-table\";\n\nimport { useLabels } from \"../../hooks/useLabels\";\n\nimport { HvCheckBox } from \"../../CheckBox\";\n\n// #region ##### TYPES #####\n\n// getRowProps:\nexport interface UseHvRowSelectionTableRowProps {\n  selected?: boolean;\n}\n\n// getRowProps:\nexport interface UseHvRowSelectionTableColumnProps {\n  \"aria-hidden\"?: boolean;\n}\n\nexport interface UseHvRowSelectionRowCheckboxProps {\n  onChange?: (e: ChangeEvent, checked?: boolean) => void;\n  checked?: boolean;\n  disabled?: boolean;\n  indeterminate?: boolean;\n}\n\nexport interface UseHvRowSelectionBulkCheckboxProps {\n  onChange?: (e: ChangeEvent, checked?: boolean) => void;\n  checked?: boolean;\n  indeterminate?: boolean;\n}\n\nexport type UseHvRowSelectionTableOptions = Partial<{\n  autoResetSelectedRows: boolean;\n  autoResetLockedSelectionRows: boolean;\n  selectSubRows: boolean;\n  manualRowSelectedKey: string;\n  applyToggleAllRowsSelectedToPrefilteredRows: boolean;\n}>;\n\nexport interface UseHvRowSelectionHooks<D extends object> {\n  getToggleRowSelectedProps: Array<\n    PropGetter<D, UseHvRowSelectionRowCheckboxProps>\n  >;\n  getToggleAllRowsSelectedProps: Array<\n    PropGetter<D, UseHvRowSelectionBulkCheckboxProps>\n  >;\n  getToggleAllPageRowsSelectedProps: Array<\n    PropGetter<D, UseHvRowSelectionBulkCheckboxProps>\n  >;\n}\n\nexport interface UseHvRowSelectionState<D extends object> {\n  selectedRowIds: Record<IdType<D>, boolean>;\n  lockedSelectionRowIds: Record<IdType<D>, boolean>;\n}\n\nexport interface UseHvRowSelectionTableInstance<D extends object> {\n  toggleRowSelected: (rowId: IdType<D>, set?: boolean) => void;\n  toggleAllRowsSelected: (value?: boolean) => void;\n  toggleAllPageRowsSelected: (value?: boolean) => void;\n  getToggleAllRowsSelectedProps: (\n    props?: Partial<UseHvRowSelectionBulkCheckboxProps>\n  ) => UseHvRowSelectionBulkCheckboxProps;\n  getToggleAllPageRowsSelectedProps: (\n    props?: Partial<UseHvRowSelectionBulkCheckboxProps>\n  ) => UseHvRowSelectionBulkCheckboxProps;\n\n  isNoRowsSelected: boolean;\n  isNoPageRowsSelected: boolean;\n  isAllRowsSelected: boolean;\n  isAllPageRowsSelected: boolean;\n  isAllSelectableRowsSelected: boolean;\n  isAllSelectablePageRowsSelected: boolean;\n  isAllSelectableRowsUnselected: boolean;\n  isAllSelectablePageRowsUnselected: boolean;\n\n  selectedFlatRows: Array<Row<D>>;\n}\n\nexport interface UseHvRowSelectionRowInstance {\n  isSelected: boolean;\n  isSomeSelected: boolean;\n  isSelectionLocked: boolean;\n  toggleRowLockedSelection: (set?: boolean) => void;\n  toggleRowSelected: (set?: boolean) => void;\n  getToggleRowSelectedProps: (\n    props?: Partial<UseHvRowSelectionRowCheckboxProps>\n  ) => UseHvRowSelectionRowCheckboxProps;\n}\n\nexport type UseRowSelectionProps = (<\n  D extends object = Record<string, unknown>\n>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\n// Actions\nactions.resetSelectedRows = \"resetSelectedRows\";\nactions.toggleAllRowsSelected = \"toggleAllRowsSelected\";\nactions.toggleRowSelected = \"toggleRowSelected\";\nactions.toggleAllPageRowsSelected = \"toggleAllPageRowsSelected\";\n\nactions.resetLockedSelectionRows = \"resetLockedSelectionRows\";\nactions.toggleRowLockedSelection = \"toggleRowLockedSelection\";\n\nconst DEFAULT_LABELS = {\n  selectRowCheckBoxAriaLabel: \"Select this row\",\n};\n\nconst hideHeaderVariants = [\"checkbox\", \"actions\"];\n\nexport const CellWithCheckBox = ({ row, labels: labelsProp }) => {\n  const labels = useLabels(DEFAULT_LABELS, labelsProp);\n\n  const { onChange, checked, disabled, indeterminate } =\n    row.getToggleRowSelectedProps();\n\n  return (\n    <HvCheckBox\n      onChange={onChange}\n      checked={checked}\n      disabled={disabled}\n      indeterminate={indeterminate}\n      aria-label={labels.selectRowCheckBoxAriaLabel}\n    />\n  );\n};\n\nconst visibleColumnsHook = (columns) => {\n  const selectionColumn = {\n    id: \"_hv_selection\",\n    variant: \"checkbox\",\n\n    width: 32,\n\n    // this will only work when using useHvTableSticky\n    // but ensures it stays left of any sticky column\n    sticky: \"left\",\n\n    Cell: CellWithCheckBox,\n  };\n\n  return [selectionColumn, ...columns];\n};\n\nconst getHeaderPropsHook = (props, { column }) => {\n  const nextProps: UseHvRowSelectionTableColumnProps = {};\n\n  if (hideHeaderVariants.includes(column.variant)) {\n    nextProps[\"aria-hidden\"] = true;\n  }\n  return [props, nextProps];\n};\n\nconst getRowPropsHook = (props, { row }) => {\n  const nextProps: UseHvRowSelectionTableRowProps = {\n    selected: row.isSelected,\n  };\n\n  return [props, nextProps];\n};\n\nexport const defaultGetToggleRowSelectedProps = (props, meta) => {\n  const { instance, row } = meta;\n  const { manualRowSelectedKey = \"isSelected\" } = instance;\n  let checked = false;\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true;\n  } else {\n    checked = row.isSelected;\n  }\n\n  return [\n    props,\n    {\n      onChange: (e, check) => {\n        row.toggleRowSelected(check ?? e?.target?.checked);\n      },\n      disabled: row.isSelectionLocked,\n      checked,\n      indeterminate: row.isSomeSelected,\n    },\n  ];\n};\n\nexport const defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: (e) => {\n      instance.toggleAllRowsSelected(e.target.checked);\n    },\n    checked: instance.isAllRowsSelected,\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n];\n\nexport const defaultGetToggleAllPageRowsSelectedProps = (\n  props,\n  { instance }\n) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked);\n    },\n    checked: instance.isAllPageRowsSelected,\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n];\n\nexport function reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      lockedSelectionRowIds: {},\n      ...state,\n    };\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    };\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action;\n    const {\n      isAllRowsSelected,\n      rowsById,\n      initialRowsById,\n      nonGroupedRowsById = rowsById,\n      applyToggleAllRowsSelectedToPrefilteredRows,\n    } = instance;\n\n    const rowsToSelect = applyToggleAllRowsSelectedToPrefilteredRows\n      ? initialRowsById\n      : nonGroupedRowsById;\n\n    const selectAll =\n      typeof setSelected !== \"undefined\" ? setSelected : !isAllRowsSelected;\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = { ...state.selectedRowIds };\n\n    if (selectAll) {\n      Object.keys(rowsToSelect).forEach((rowId) => {\n        const isSelectionLocked = state.lockedSelectionRowIds[rowId];\n        if (!isSelectionLocked) {\n          selectedRowIds[rowId] = true;\n        }\n      });\n    } else {\n      Object.keys(rowsToSelect).forEach((rowId) => {\n        const isSelectionLocked = state.lockedSelectionRowIds[rowId];\n        if (!isSelectionLocked) {\n          delete selectedRowIds[rowId];\n        }\n      });\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    };\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action;\n    const isSelectionLocked = state.lockedSelectionRowIds[id];\n    if (isSelectionLocked) {\n      return state;\n    }\n\n    const { rowsById, selectSubRows = true, getSubRows } = instance;\n    const isSelected = state.selectedRowIds[id];\n    const shouldExist =\n      typeof setSelected !== \"undefined\" ? setSelected : !isSelected;\n\n    if (isSelected === shouldExist) {\n      return state;\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds };\n\n    const handleRowById = (rowId) => {\n      const row = rowsById[rowId];\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[rowId] = true;\n        } else {\n          delete newSelectedRowIds[rowId];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        getSubRows(row).forEach((subrow) => {\n          handleRowById(subrow.id);\n        });\n      }\n    };\n\n    handleRowById(id);\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    };\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action;\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance;\n\n    const selectAll =\n      typeof setSelected !== \"undefined\" ? setSelected : !isAllPageRowsSelected;\n    const newSelectedRowIds = { ...state.selectedRowIds };\n\n    const handleRowById = (rowId) => {\n      const row = rowsById[rowId];\n      const isSelectionLocked = state.lockedSelectionRowIds[rowId];\n\n      if (!isSelectionLocked && !row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[rowId] = true;\n        } else {\n          delete newSelectedRowIds[rowId];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        getSubRows(row).forEach((subrow) => {\n          handleRowById(subrow.id);\n        });\n      }\n    };\n\n    page.forEach((row) => handleRowById(row.id));\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    };\n  }\n\n  if (action.type === actions.resetLockedSelectionRows) {\n    return {\n      ...state,\n      lockedSelectionRowIds: instance.initialState.lockedSelectionRowIds || {},\n    };\n  }\n\n  if (action.type === actions.toggleRowLockedSelection) {\n    const { id, value: setLockedSelection } = action;\n    const { rowsById, selectSubRows = true, getSubRows } = instance;\n    const isLockedSelection = state.lockedSelectionRowIds[id];\n    const shouldExist =\n      typeof setLockedSelection !== \"undefined\"\n        ? setLockedSelection\n        : !isLockedSelection;\n\n    if (isLockedSelection === shouldExist) {\n      return state;\n    }\n\n    const newLockedSelectionRowIds = { ...state.lockedSelectionRowIds };\n\n    const handleRowById = (rowId) => {\n      const row = rowsById[rowId];\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newLockedSelectionRowIds[rowId] = true;\n        } else {\n          delete newLockedSelectionRowIds[rowId];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        getSubRows(row).forEach((subrow) => {\n          handleRowById(subrow.id);\n        });\n      }\n    };\n\n    handleRowById(id);\n\n    return {\n      ...state,\n      lockedSelectionRowIds: newLockedSelectionRowIds,\n    };\n  }\n\n  return state;\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true;\n  }\n\n  const subRows = getSubRows(row);\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n\n    subRows.forEach((subRow) => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n\n    if (allChildrenSelected) {\n      return true;\n    }\n\n    if (someSelected) {\n      return null;\n    }\n  }\n\n  return false;\n}\n\nexport function useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    initialRowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    autoResetLockedSelectionRows = true,\n    state: { selectedRowIds, lockedSelectionRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n    applyToggleAllRowsSelectedToPrefilteredRows,\n  } = instance;\n\n  ensurePluginOrder(\n    plugins,\n    [\"useFilters\", \"useGroupBy\", \"useSortBy\", \"useExpanded\", \"usePagination\"],\n    \"useHvRowSelection\"\n  );\n\n  const rowsToSelect = applyToggleAllRowsSelectedToPrefilteredRows\n    ? initialRowsById\n    : nonGroupedRowsById;\n\n  const selectedFlatRows = useMemo(() => {\n    const selectedRows: any[] = [];\n\n    rows.forEach((row) => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id];\n      row.isSelected = !!isSelected;\n      row.isSomeSelected = isSelected === null;\n\n      if (isSelected) {\n        selectedRows.push(row);\n      }\n    });\n\n    return selectedRows;\n  }, [rows, selectSubRows, selectedRowIds, getSubRows]);\n\n  const existsLockedRows = !!Object.keys(lockedSelectionRowIds).length;\n\n  const isNoRowsSelected = !(\n    Object.keys(rowsToSelect).length && selectedFlatRows.length\n  );\n\n  let isNoPageRowsSelected;\n  let isAllRowsSelected;\n  let isAllPageRowsSelected;\n\n  let isAllSelectableRowsUnselected;\n  let isAllSelectablePageRowsUnselected;\n  let isAllSelectableRowsSelected;\n  let isAllSelectablePageRowsSelected;\n\n  if (isNoRowsSelected) {\n    isAllRowsSelected = false;\n    isAllPageRowsSelected = false;\n\n    isAllSelectableRowsSelected =\n      existsLockedRows &&\n      !Object.keys(rowsToSelect).some((id) => !lockedSelectionRowIds[id]);\n    isAllSelectablePageRowsSelected = isAllSelectableRowsSelected;\n\n    isAllSelectableRowsUnselected = isAllSelectableRowsSelected;\n    isAllSelectablePageRowsUnselected = isAllSelectableRowsSelected;\n\n    isNoPageRowsSelected = true;\n  } else {\n    isAllRowsSelected = !Object.keys(rowsToSelect).some(\n      (id) => !selectedRowIds[id]\n    );\n\n    if (isAllRowsSelected) {\n      isAllSelectableRowsSelected = true;\n      isAllSelectablePageRowsSelected = true;\n\n      isAllSelectableRowsUnselected =\n        existsLockedRows &&\n        Object.keys(rowsToSelect).filter((id) => !lockedSelectionRowIds[id])\n          .length === 0;\n      isAllSelectablePageRowsUnselected = isAllSelectableRowsUnselected;\n\n      isNoPageRowsSelected = false;\n      isAllPageRowsSelected = true;\n    } else {\n      isAllSelectableRowsSelected =\n        existsLockedRows &&\n        !Object.keys(rowsToSelect)\n          .filter((id) => !lockedSelectionRowIds[id])\n          .some((id) => !selectedRowIds[id]);\n\n      isAllSelectableRowsUnselected =\n        !existsLockedRows ||\n        !Object.keys(rowsToSelect)\n          .filter((id) => !lockedSelectionRowIds[id])\n          .some((id) => selectedRowIds[id]);\n\n      isAllPageRowsSelected = !(\n        page &&\n        page.length &&\n        page.some(({ id }) => !selectedRowIds[id])\n      );\n\n      if (isAllPageRowsSelected) {\n        isAllSelectablePageRowsSelected = true;\n\n        isAllSelectablePageRowsUnselected =\n          existsLockedRows &&\n          page &&\n          page.length &&\n          page.filter(({ id }) => !lockedSelectionRowIds[id]).length === 0;\n\n        isNoPageRowsSelected = false;\n      } else {\n        isAllSelectablePageRowsSelected =\n          existsLockedRows &&\n          !(\n            page &&\n            page.length &&\n            page\n              .filter(({ id }) => !lockedSelectionRowIds[id])\n              .some(({ id }) => !selectedRowIds[id])\n          );\n\n        isAllSelectablePageRowsUnselected =\n          !existsLockedRows ||\n          !(\n            page &&\n            page.length &&\n            page\n              .filter(({ id }) => !lockedSelectionRowIds[id])\n              .some(({ id }) => selectedRowIds[id])\n          );\n\n        isNoPageRowsSelected = !(\n          page &&\n          page.length &&\n          page.some(({ id }) => selectedRowIds[id])\n        );\n      }\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n\n  const getAutoResetLockedSelectionRows = useGetLatest(\n    autoResetLockedSelectionRows\n  );\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows });\n    }\n    if (getAutoResetLockedSelectionRows()) {\n      dispatch({ type: actions.resetLockedSelectionRows });\n    }\n  }, [dispatch, data]);\n\n  const toggleAllRowsSelected = useCallback(\n    (value) => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  );\n\n  const toggleAllPageRowsSelected = useCallback(\n    (value) => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  );\n\n  const toggleRowSelected = useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  );\n\n  const getInstance = useGetLatest(instance);\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    {\n      instance: getInstance(),\n    }\n  );\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  );\n\n  const toggleRowLockedSelection = useCallback(\n    (id, value) =>\n      dispatch({ type: actions.toggleRowLockedSelection, id, value }),\n    [dispatch]\n  );\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isNoRowsSelected,\n    isNoPageRowsSelected,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    isAllSelectableRowsSelected,\n    isAllSelectablePageRowsSelected,\n    isAllSelectableRowsUnselected,\n    isAllSelectablePageRowsUnselected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n    toggleRowLockedSelection,\n  });\n}\n\nexport function prepareRow(row, { instance }) {\n  row.toggleRowSelected = (set) => instance.toggleRowSelected(row.id, set);\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    {\n      instance,\n      row,\n    }\n  );\n\n  row.toggleRowLockedSelection = (set) =>\n    instance.toggleRowLockedSelection(row.id, set);\n  row.isSelectionLocked =\n    instance.state?.lockedSelectionRowIds?.[row.id] || false;\n}\n\nconst useRowSelection: UseRowSelectionProps = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n\n  hooks.getRowProps.push(getRowPropsHook);\n\n  // props target: <table><thead><tr><th>\n  hooks.getHeaderProps.push(getHeaderPropsHook);\n\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ];\n\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.prepareRow.push(prepareRow);\n};\n\nuseRowSelection.pluginName = \"useHvRowSelection\";\n\nexport default useRowSelection;\n"],"names":["actions","useLabels","jsx","HvCheckBox","ensurePluginOrder","useMemo","useGetLatest","useMountedLayoutEffect","useCallback","makePropGetter"],"mappings":"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"}