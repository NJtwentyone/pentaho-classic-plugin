import * as index from "./tokens/index.mjs";
import { mapCSSVars, hasMultipleArgs, spacingUtil, spacingUtilOld } from "./utils.mjs";
import { colors } from "./tokens/colors.mjs";
const componentsSpec = {
  header: {
    height: "string",
    secondLevelHeight: "string"
  },
  bulkActions: {
    actionButtonVariant: "string"
  },
  table: {
    rowStripedBackgroundColorEven: "string",
    rowStripedBackgroundColorOdd: "string",
    rowExpandBackgroundColor: "string",
    rowSortedColor: "string",
    rowSortedColorAlpha: "string"
  },
  stepNavigation: {
    separatorMargin: "string",
    defaultSeparatorHeight: "string",
    simpleSeparatorHeight: "string"
  },
  filterGroup: {
    applyButtonVariant: "string",
    cancelButtonVariant: "string"
  },
  scrollTo: {
    dotSelectedSize: "string",
    backgroundColorOpacity: "string"
  },
  colorPicker: {
    hueDirection: "string"
  },
  snackbar: {
    actionButtonVariant: "string"
  }
};
const typographyProps = {
  color: "string",
  fontSize: "string",
  letterSpacing: "string",
  lineHeight: "string",
  fontWeight: "string",
  textDecoration: "string"
};
const typographySpec = {
  typography: {
    // DS5
    display: { ...typographyProps },
    title1: { ...typographyProps },
    title2: { ...typographyProps },
    title3: { ...typographyProps },
    title4: { ...typographyProps },
    label: { ...typographyProps },
    body: { ...typographyProps },
    caption1: { ...typographyProps },
    caption2: { ...typographyProps },
    // LEGACY UNMAPPABLE (DS3)
    "5xlTitle": { ...typographyProps },
    "4xlTitle": { ...typographyProps },
    xxlTitle: { ...typographyProps },
    lTitle: { ...typographyProps },
    sTitle: { ...typographyProps },
    xxsTitle: { ...typographyProps },
    sectionTitle: { ...typographyProps },
    placeholderText: { ...typographyProps },
    link: { ...typographyProps },
    disabledText: { ...typographyProps },
    selectedNavText: { ...typographyProps },
    vizTextDisabled: { ...typographyProps },
    xsInlineLink: { ...typographyProps }
  }
};
const colorTokens = {
  containerBackgroundHover: colors.light.primary_20,
  backgroundColor: colors.light.atmo2,
  ...colors.common,
  ...colors.light
};
const themeVars = mapCSSVars({
  ...index,
  colors: {
    type: "light",
    ...colorTokens
  },
  // Flatten colors and add background color
  ...componentsSpec,
  ...typographySpec
});
const rgbVars = mapCSSVars({
  rgb: {
    ...colorTokens
  }
});
const spacing = (...args) => {
  if (hasMultipleArgs(args)) {
    return args.map((arg) => spacingUtil(arg, themeVars)).join(" ");
  }
  const [value] = args;
  switch (typeof value) {
    case "number":
    case "string":
      return spacingUtil(value, themeVars);
    case "object":
      return value && value.length > 0 ? value.map((val) => spacingUtilOld(val, themeVars)).join(" ") : "0px";
    default:
      return "0px";
  }
};
const alpha = (color, factor) => `rgb(${rgbVars.rgb[color]} / ${factor})`;
const theme = {
  ...themeVars,
  spacing,
  alpha
};
const getColorOrFallback = (color) => {
  return color && theme.colors[color] || color;
};
const getColor = (color, fallbackColor) => getColorOrFallback(color) || getColorOrFallback(fallbackColor);
export {
  getColor,
  theme
};
