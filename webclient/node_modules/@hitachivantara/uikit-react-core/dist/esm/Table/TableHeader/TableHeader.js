import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { forwardRef, useContext, useMemo } from "react";
import capitalize from "lodash/capitalize";
import { alpha, hexToRgb } from "@mui/material/styles";
import { theme } from "@hitachivantara/uikit-styles";
import { useTheme } from "../../hooks/useTheme.js";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import TableContext from "../TableContext.js";
import TableSectionContext from "../TableSectionContext.js";
import { getSortIcon, isParagraph } from "./utils.js";
import { useClasses, staticClasses } from "./TableHeader.styles.js";
import { HvButton } from "../../Button/Button.js";
import { HvTypography } from "../../Typography/Typography.js";
const defaultComponent = "th";
const HvTableHeader = forwardRef(
  (props, externalRef) => {
    const {
      children,
      component,
      className,
      style: styleProp,
      classes: classesProp,
      scope: scopeProp,
      align = "inherit",
      variant = "default",
      type: typeProp,
      stickyColumn = false,
      stickyColumnMostLeft = false,
      stickyColumnLeastRight = false,
      groupColumnMostLeft = false,
      groupColumnMostRight = false,
      sortDirection = "none",
      sorted,
      sortable,
      headerTextProps,
      resizerProps = {},
      resizable = false,
      resizing = false,
      sortButtonProps,
      ...others
    } = useDefaultProps("HvTableHeader", props);
    const { classes, cx, css } = useClasses(classesProp);
    const { colors } = useTheme();
    const tableContext = useContext(TableContext);
    const tableSectionContext = useContext(TableSectionContext);
    const type = typeProp || tableSectionContext?.type || "body";
    const isHeadCell = type === "head";
    const scope = scopeProp ?? (isHeadCell ? "col" : "row");
    const Sort = useMemo(
      () => getSortIcon(sorted && sortDirection),
      [sorted, sortDirection]
    );
    const Component = component || tableContext?.components?.Th || defaultComponent;
    const role = Component === defaultComponent ? null : isHeadCell ? "columnheader" : "rowheader";
    const paragraph = isParagraph(children);
    const style = stickyColumn ? { ...styleProp, position: "sticky" } : styleProp;
    return /* @__PURE__ */ jsx(
      Component,
      {
        ref: externalRef,
        role,
        scope,
        style,
        className: cx(
          classes.root,
          classes[type],
          type === "body" && css({
            [`&.${staticClasses.sorted}`]: {
              backgroundColor: alpha(
                hexToRgb(colors?.atmo1 || theme.colors.atmo1),
                0.4
              )
            }
          }),
          {
            [classes.groupColumnMostLeft]: groupColumnMostLeft,
            [classes.groupColumnMostRight]: groupColumnMostRight,
            [classes.sortable]: sortable,
            [classes.sorted]: sorted,
            [classes.resizable]: resizable,
            [classes.resizing]: resizing,
            [classes.stickyColumn]: stickyColumn,
            [classes.stickyColumnMostLeft]: stickyColumnMostLeft,
            [classes.stickyColumnLeastRight]: stickyColumnLeastRight,
            [classes.variantList]: tableContext.variant === "listrow",
            [classes[`align${capitalize(align)}`]]: align !== "inherit",
            [classes[`variant${capitalize(variant)}`]]: variant !== "default"
          },
          className
        ),
        "aria-sort": sortable ? sortDirection : void 0,
        ...others,
        children: /* @__PURE__ */ jsxs(
          "div",
          {
            className: cx(classes.headerContent, {
              [classes[`alignFlex${capitalize(align)}`]]: align !== "inherit"
            }),
            children: [
              isHeadCell && sortable && /* @__PURE__ */ jsx(
                HvButton,
                {
                  className: classes.sortButton,
                  icon: true,
                  overrideIconColors: false,
                  "aria-label": "Sort",
                  ...sortButtonProps,
                  children: /* @__PURE__ */ jsx(Sort, { className: classes.sortIcon })
                }
              ),
              /* @__PURE__ */ jsx(
                HvTypography,
                {
                  component: "div",
                  className: cx({
                    [classes.headerText]: !paragraph,
                    [classes.headerParagraph]: paragraph,
                    [classes.sortableHeaderText]: sortable
                  }),
                  variant: "label",
                  ...headerTextProps,
                  children
                }
              ),
              resizable && /* @__PURE__ */ jsx("div", { ...resizerProps, className: classes.resizer })
            ]
          }
        )
      }
    );
  }
);
export {
  HvTableHeader,
  staticClasses as tableHeaderClasses
};
