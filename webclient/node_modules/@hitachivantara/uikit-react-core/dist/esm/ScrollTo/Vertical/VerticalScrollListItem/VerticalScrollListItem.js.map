{"version":3,"file":"VerticalScrollListItem.js","sources":["../../../../../src/ScrollTo/Vertical/VerticalScrollListItem/VerticalScrollListItem.tsx"],"sourcesContent":["import { CurrentStep } from \"@hitachivantara/uikit-react-icons\";\n\nimport { HvBaseProps } from \"../../../types/generic\";\nimport { HvTooltip, HvTooltipProps } from \"../../../Tooltip\";\nimport { ExtractNames } from \"../../../utils/classes\";\nimport { useTheme } from \"../../../hooks/useTheme\";\nimport { useDefaultProps } from \"../../../hooks/useDefaultProps\";\n\nimport { staticClasses, useClasses } from \"./VerticalScrollListItem.styles\";\n\nexport { staticClasses as verticalScrollListItemClasses };\n\nexport type HvVerticalScrollListItemClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvVerticalScrollListItemProps\n  extends HvBaseProps<HTMLDivElement | HTMLAnchorElement> {\n  /** A Jss Object used to override or extend the styles applied. */\n  classes?: HvVerticalScrollListItemClasses;\n  /** Whether the element is selected. */\n  selected?: boolean;\n  /** The function to be executed when the element is clicked. */\n  onClick?: (\n    event: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>\n  ) => void;\n  /** The function to be executed when the element is clicked. */\n  onKeyDown?: (\n    event: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement>\n  ) => void;\n  label?: React.ReactNode;\n  tooltipPlacement?: HvTooltipProps[\"placement\"];\n\n  /**\n   * The link to be set in the href attribute of the anchor element.\n   *\n   * If this is not set, the element will be rendered as a div with a button role.\n   */\n  href?: string;\n}\n\n/**\n * HvVerticalScrollListItem a focusable item to be used as part of the vertical scroll\n */\nexport const HvVerticalScrollListItem = (\n  props: HvVerticalScrollListItemProps\n) => {\n  const {\n    id,\n    className,\n    classes: classesProp,\n    selected,\n    label,\n    onClick,\n    onKeyDown,\n    tooltipPlacement = \"left\",\n    href,\n    ...others\n  } = useDefaultProps(\"HvVerticalScrollListItem\", props);\n  const { classes, cx } = useClasses(classesProp);\n  const { activeTheme } = useTheme();\n\n  const icon = selected ? (\n    <CurrentStep\n      height={activeTheme?.scrollTo.dotSelectedSize}\n      width={activeTheme?.scrollTo.dotSelectedSize}\n    />\n  ) : (\n    <div className={classes.notSelected} />\n  );\n\n  const Component = href != null ? \"a\" : \"div\";\n\n  return (\n    <li id={id} className={cx(classes.root, className)} aria-current={selected}>\n      <HvTooltip title={label} placement={tooltipPlacement}>\n        <Component\n          role={href == null ? \"button\" : undefined}\n          tabIndex={0}\n          onClick={onClick}\n          onKeyDown={onKeyDown}\n          className={cx(classes.button, classes.text)}\n          href={href}\n          {...others}\n        >\n          {icon}\n        </Component>\n      </HvTooltip>\n    </li>\n  );\n};\n"],"names":[],"mappings":";;;;;;;AA0Ca,MAAA,2BAA2B,CACtC,UACG;AACG,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,mBAAmB;AAAA,IACnB;AAAA,IACA,GAAG;AAAA,EAAA,IACD,gBAAgB,4BAA4B,KAAK;AACrD,QAAM,EAAE,SAAS,GAAG,IAAI,WAAW,WAAW;AACxC,QAAA,EAAE,gBAAgB;AAExB,QAAM,OAAO,WACX;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,QAAQ,aAAa,SAAS;AAAA,MAC9B,OAAO,aAAa,SAAS;AAAA,IAAA;AAAA,EAAA,IAG/B,oBAAC,OAAI,EAAA,WAAW,QAAQ,YAAa,CAAA;AAGjC,QAAA,YAAY,QAAQ,OAAO,MAAM;AAEvC,6BACG,MAAG,EAAA,IAAQ,WAAW,GAAG,QAAQ,MAAM,SAAS,GAAG,gBAAc,UAChE,UAAC,oBAAA,WAAA,EAAU,OAAO,OAAO,WAAW,kBAClC,UAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,MAAM,QAAQ,OAAO,WAAW;AAAA,MAChC,UAAU;AAAA,MACV;AAAA,MACA;AAAA,MACA,WAAW,GAAG,QAAQ,QAAQ,QAAQ,IAAI;AAAA,MAC1C;AAAA,MACC,GAAG;AAAA,MAEH,UAAA;AAAA,IAAA;AAAA,EAAA,EAEL,CAAA,EACF,CAAA;AAEJ;"}