"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const VerticalNavigationContext = require("../VerticalNavigationContext.cjs");
const Header_styles = require("./Header.styles.cjs");
const Button = require("../../Button/Button.cjs");
const Typography = require("../../Typography/Typography.cjs");
const HvVerticalNavigationHeader = ({
  title,
  openIcon: openIconProp,
  closeIcon: closeIconProp,
  collapseButtonProps,
  backButtonProps,
  className,
  classes: classesProp,
  onCollapseButtonClick,
  ...others
}) => {
  const {
    isOpen,
    useIcons,
    headerTitle,
    slider,
    navigateToParentHandler,
    parentItem
  } = React.useContext(VerticalNavigationContext.VerticalNavigationContext);
  const { classes, cx } = Header_styles.useClasses(classesProp);
  const openIcon = openIconProp ?? (!useIcons ? /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Menu, {}) : /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Forwards, {}));
  const closeIcon = closeIconProp ?? /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Backwards, {});
  const backButtonClickHandler = () => {
    if (navigateToParentHandler)
      navigateToParentHandler();
  };
  const shouldShowTitle = React.useMemo(
    () => !slider || slider && !Array.isArray(parentItem),
    [parentItem, slider]
  );
  return shouldShowTitle ? /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      className: cx(classes.root, { [classes.minimized]: !isOpen }, className),
      ...others,
      children: [
        isOpen && headerTitle && slider && /* @__PURE__ */ jsxRuntime.jsx(
          Button.HvButton,
          {
            icon: true,
            onClick: backButtonClickHandler,
            "aria-label": "Back",
            ...backButtonProps,
            children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Backwards, { iconSize: "XS" })
          }
        ),
        isOpen && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: slider ? "label" : "title3", children: headerTitle && slider ? headerTitle : title }),
        onCollapseButtonClick && /* @__PURE__ */ jsxRuntime.jsx(
          Button.HvButton,
          {
            icon: true,
            onClick: onCollapseButtonClick,
            className: classes.collapseButton,
            classes: {
              root: isOpen ? "" : classes.minimized
            },
            ...collapseButtonProps,
            children: isOpen ? closeIcon : openIcon
          }
        )
      ]
    }
  ) : null;
};
exports.verticalNavigationHeaderClasses = Header_styles.staticClasses;
exports.HvVerticalNavigationHeader = HvVerticalNavigationHeader;
