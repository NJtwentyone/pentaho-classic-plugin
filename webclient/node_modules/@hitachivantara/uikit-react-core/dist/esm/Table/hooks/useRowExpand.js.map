{"version":3,"file":"useRowExpand.js","sources":["../../../../src/Table/hooks/useRowExpand.tsx"],"sourcesContent":["import { MouseEventHandler } from \"react\";\nimport {\n  Hooks,\n  TableExpandedToggleProps,\n  UseExpandedRowProps,\n} from \"react-table\";\n\nimport { DropDownXS, DropUpXS } from \"@hitachivantara/uikit-react-icons\";\n\nimport { HvTypography } from \"../../Typography\";\nimport { HvButton } from \"../../Button\";\n\nimport { useLabels } from \"../../hooks/useLabels\";\n\n// #region ##### TYPES #####\n\nexport interface UseHvRowExpandTableRowProps {\n  expanded?: boolean;\n}\n\nexport type UseHvRowExpandTableOptions = {\n  disableCreateExpandButton?: boolean;\n};\n\nexport interface UseHvRowExpandRowToggleProps extends TableExpandedToggleProps {\n  onClick?: MouseEventHandler<unknown>;\n}\n\nexport interface UseHvRowExpandRowInstance<\n  D extends object = Record<string, unknown>\n> extends UseExpandedRowProps<D> {\n  getToggleRowExpandedProps: (\n    props?: Partial<TableExpandedToggleProps>\n  ) => UseHvRowExpandRowToggleProps;\n}\n\nexport type UseRowExpandProps = (<D extends object = Record<string, unknown>>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\nconst DEFAULT_LABELS = {\n  expandRowButtonAriaLabel: \"Expand this row\",\n  collapseRowButtonAriaLabel: \"Collapse this row\",\n};\n\nexport const CellWithExpandButton = ({ row, cell, labels: labelsProp }) => {\n  const labels = useLabels(DEFAULT_LABELS, labelsProp);\n\n  const { onClick } = row.getToggleRowExpandedProps();\n\n  return (\n    <>\n      <HvButton\n        icon\n        aria-label={\n          row.isExpanded\n            ? labels.collapseRowButtonAriaLabel\n            : labels.expandRowButtonAriaLabel\n        }\n        aria-expanded={row.isExpanded}\n        onClick={onClick}\n      >\n        {row.isExpanded ? <DropDownXS /> : <DropUpXS />}\n      </HvButton>\n      {cell?.value && (\n        <HvTypography variant=\"label\" component=\"span\">\n          {cell.value}\n        </HvTypography>\n      )}\n    </>\n  );\n};\n\nconst visibleColumnsHook = (columns, { instance }) => {\n  if (instance.disableCreateExpandButton) {\n    return columns;\n  }\n\n  // add a button to first data column, unless it has a custom renderer\n  // if so, add an extra column instead\n  const firstDataColumnIndex = columns.findIndex(\n    (c) => c.id?.indexOf(\"_hv_\") !== 0\n  );\n\n  if (firstDataColumnIndex !== -1) {\n    const firstDataColumn = columns[firstDataColumnIndex];\n\n    if (firstDataColumn.Cell == null) {\n      firstDataColumn.Cell = CellWithExpandButton;\n      firstDataColumn.variant = \"expand\";\n\n      return columns;\n    }\n  }\n\n  const expandColumn = {\n    id: \"_hv_expand\",\n    variant: \"none\",\n\n    width: 32,\n\n    // this will only work when using useHvTableSticky\n    // but ensures it stays left of any sticky column\n    sticky: \"left\",\n\n    Cell: CellWithExpandButton,\n  };\n\n  const columnsCopy = [...columns];\n  columnsCopy.splice(\n    firstDataColumnIndex !== -1 ? firstDataColumnIndex : 0,\n    0,\n    expandColumn\n  );\n\n  return columnsCopy;\n};\n\nconst getRowPropsHook = (props, { row }) => {\n  const nextProps: UseHvRowExpandTableRowProps = {\n    expanded: row.isExpanded,\n  };\n\n  return [props, nextProps];\n};\n\nconst useRowExpand: UseRowExpandProps = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n  hooks.getRowProps.push(getRowPropsHook);\n};\nuseRowExpand.pluginName = \"useHvRowExpand\";\n\nexport default useRowExpand;\n"],"names":[],"mappings":";;;;;AA0CA,MAAM,iBAAiB;AAAA,EACrB,0BAA0B;AAAA,EAC1B,4BAA4B;AAC9B;AAEO,MAAM,uBAAuB,CAAC,EAAE,KAAK,MAAM,QAAQ,iBAAiB;AACnE,QAAA,SAAS,UAAU,gBAAgB,UAAU;AAEnD,QAAM,EAAE,QAAA,IAAY,IAAI,0BAA0B;AAElD,SAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,MAAI;AAAA,QACJ,cACE,IAAI,aACA,OAAO,6BACP,OAAO;AAAA,QAEb,iBAAe,IAAI;AAAA,QACnB;AAAA,QAEC,cAAI,aAAa,oBAAC,YAAW,CAAA,CAAA,wBAAM,UAAS,EAAA;AAAA,MAAA;AAAA,IAC/C;AAAA,IACC,MAAM,SACJ,oBAAA,cAAA,EAAa,SAAQ,SAAQ,WAAU,QACrC,UAAA,KAAK,MACR,CAAA;AAAA,EAEJ,EAAA,CAAA;AAEJ;AAEA,MAAM,qBAAqB,CAAC,SAAS,EAAE,eAAe;AACpD,MAAI,SAAS,2BAA2B;AAC/B,WAAA;AAAA,EACT;AAIA,QAAM,uBAAuB,QAAQ;AAAA,IACnC,CAAC,MAAM,EAAE,IAAI,QAAQ,MAAM,MAAM;AAAA,EAAA;AAGnC,MAAI,yBAAyB,IAAI;AACzB,UAAA,kBAAkB,QAAQ,oBAAoB;AAEhD,QAAA,gBAAgB,QAAQ,MAAM;AAChC,sBAAgB,OAAO;AACvB,sBAAgB,UAAU;AAEnB,aAAA;AAAA,IACT;AAAA,EACF;AAEA,QAAM,eAAe;AAAA,IACnB,IAAI;AAAA,IACJ,SAAS;AAAA,IAET,OAAO;AAAA;AAAA;AAAA,IAIP,QAAQ;AAAA,IAER,MAAM;AAAA,EAAA;AAGF,QAAA,cAAc,CAAC,GAAG,OAAO;AACnB,cAAA;AAAA,IACV,yBAAyB,KAAK,uBAAuB;AAAA,IACrD;AAAA,IACA;AAAA,EAAA;AAGK,SAAA;AACT;AAEA,MAAM,kBAAkB,CAAC,OAAO,EAAE,UAAU;AAC1C,QAAM,YAAyC;AAAA,IAC7C,UAAU,IAAI;AAAA,EAAA;AAGT,SAAA,CAAC,OAAO,SAAS;AAC1B;AAEA,MAAM,eAAkC,CAAC,UAAU;AAC3C,QAAA,eAAe,KAAK,kBAAkB;AACtC,QAAA,YAAY,KAAK,eAAe;AACxC;AACA,aAAa,aAAa;AAE1B,MAAA,iBAAe;"}