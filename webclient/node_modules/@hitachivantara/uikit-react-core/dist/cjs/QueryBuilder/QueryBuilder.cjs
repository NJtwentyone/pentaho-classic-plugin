"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const cloneDeep = require("lodash/cloneDeep");
const isEqual = require("lodash/isEqual");
const useDefaultProps = require("../hooks/useDefaultProps.cjs");
const Context = require("./Context.cjs");
const index = require("./utils/index.cjs");
const reducer = require("./utils/reducer.cjs");
const QueryBuilder_styles = require("./QueryBuilder.styles.cjs");
const RuleGroup = require("./RuleGroup/RuleGroup.cjs");
const ConfirmationDialog = require("./ConfirmationDialog/ConfirmationDialog.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const cloneDeep__default = /* @__PURE__ */ _interopDefault(cloneDeep);
const isEqual__default = /* @__PURE__ */ _interopDefault(isEqual);
const HvQueryBuilder = (props) => {
  const {
    attributes,
    renderers,
    query,
    onChange,
    disableConfirmation = false,
    operators = Context.defaultOperators,
    combinators = Context.defaultCombinators,
    maxDepth = 1,
    labels = Context.defaultLabels,
    readOnly = false,
    emptyRenderer = ["Empty", "IsNotEmpty"],
    classes: classesProp
  } = useDefaultProps.useDefaultProps("HvQueryBuilder", props);
  const { classes } = QueryBuilder_styles.useClasses(classesProp);
  const currentAttributes = React.useRef(
    null
  );
  const initialQuery = React.useRef(query ?? index.emptyGroup());
  const [pendingAction, setPendingAction] = React.useState();
  const [prevState, setPrevState] = React.useState(initialQuery.current);
  const [initialState, setInitialState] = React.useState(true);
  const [state, dispatchAction] = React.useReducer(
    reducer.default,
    // Deep clone is needed to make sure that the "query" prop and "initialQuery" are not mutated
    cloneDeep__default.default(initialQuery.current)
  );
  const value = React.useMemo(
    () => ({
      dispatchAction,
      askAction: setPendingAction,
      attributes,
      operators,
      combinators,
      maxDepth,
      labels,
      initialTouched: initialState,
      readOnly,
      renderers,
      disableConfirmation,
      emptyRenderer
    }),
    [
      attributes,
      operators,
      combinators,
      maxDepth,
      labels,
      readOnly,
      initialState,
      renderers,
      disableConfirmation,
      emptyRenderer
    ]
  );
  React.useEffect(() => {
    if (currentAttributes.current == null) {
      currentAttributes.current = attributes;
    } else if (currentAttributes.current !== attributes) {
      currentAttributes.current = attributes;
      dispatchAction({ type: "reset-query" });
    }
  }, [attributes]);
  React.useEffect(() => {
    if (!isEqual__default.default(state, prevState)) {
      if (initialState) {
        setInitialState(false);
      }
      onChange?.(index.clearNodeIds(state));
      setPrevState(cloneDeep__default.default(state));
    }
  }, [initialState, onChange, prevState, state]);
  const handleConfirm = () => {
    if (pendingAction) {
      setPendingAction(void 0);
      pendingAction.actions.forEach((action) => dispatchAction(action));
    }
  };
  const handleCancel = () => {
    setPendingAction(void 0);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(Context.HvQueryBuilderProvider, { value, children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      RuleGroup.RuleGroup,
      {
        level: 0,
        id: state.id,
        combinator: state.combinator,
        rules: state.rules,
        classes
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(
      ConfirmationDialog.ConfirmationDialog,
      {
        isOpen: pendingAction != null,
        onConfirm: handleConfirm,
        onCancel: handleCancel,
        title: pendingAction?.dialog.dialogTitle || "",
        message: pendingAction?.dialog.dialogMessage || "",
        confirmButtonLabel: pendingAction?.dialog.dialogConfirm || "",
        cancelButtonLabel: pendingAction?.dialog.dialogCancel || "",
        closeButtonTooltip: pendingAction?.dialog.dialogCloseTooltip || ""
      }
    )
  ] });
};
exports.queryBuilderClasses = QueryBuilder_styles.staticClasses;
exports.HvQueryBuilder = HvQueryBuilder;
