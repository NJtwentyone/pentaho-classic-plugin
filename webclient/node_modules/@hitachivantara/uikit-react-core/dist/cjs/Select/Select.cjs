"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const clsx = require("clsx");
const useSelect = require("@mui/base/useSelect");
const utils = require("@mui/material/utils");
const Popper = require("@mui/base/Popper");
const generic = require("../types/generic.cjs");
const useDefaultProps = require("../hooks/useDefaultProps.cjs");
const Select_styles = require("./Select.styles.cjs");
const setId = require("../utils/setId.cjs");
const useUniqueId = require("../hooks/useUniqueId.cjs");
const SelectButton = require("./SelectButton.cjs");
const Panel = require("../Panel/Panel.cjs");
const FormElement = require("../Forms/FormElement/FormElement.cjs");
const Label = require("../Forms/Label/Label.cjs");
const InfoMessage = require("../Forms/InfoMessage/InfoMessage.cjs");
const ListContainer = require("../ListContainer/ListContainer.cjs");
const WarningText = require("../Forms/WarningText/WarningText.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const clsx__default = /* @__PURE__ */ _interopDefault(clsx);
function defaultRenderValue(options) {
  if (Array.isArray(options)) {
    if (options.length === 0)
      return null;
    return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: options.map((o) => o.label).join(", ") });
  }
  return options?.label ?? null;
}
const mergeIds = (...ids) => clsx__default.default(ids) || void 0;
const HvSelect = generic.fixedForwardRef(function HvSelect2(props, ref) {
  const {
    children,
    classes: classesProp,
    className,
    id: idProp,
    name,
    required,
    disabled: disabledProp,
    readOnly,
    label,
    open: openProp,
    defaultOpen,
    multiple,
    autoComplete,
    options: optionsProp,
    variableWidth,
    value: valueProp,
    defaultValue,
    placeholder,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    description,
    "aria-describedby": ariaDescribedBy,
    status,
    statusMessage,
    "aria-errormessage": ariaErrorMessage,
    getSerializedValue,
    onClick,
    onChange,
    onOpenChange,
    ...others
  } = useDefaultProps.useDefaultProps("HvSelect", props);
  const { classes, cx } = Select_styles.useClasses(classesProp);
  const [placement, setPlacement] = React.useState("bottom-start");
  const buttonRef = React.useRef(null);
  const handleButtonRef = utils.useForkRef(ref, buttonRef);
  const {
    contextValue,
    disabled,
    getButtonProps,
    getListboxProps,
    getHiddenInputProps,
    getOptionMetadata,
    value,
    open
  } = useSelect.useSelect({
    componentName: "HvSelect",
    name,
    required,
    disabled: disabledProp,
    multiple,
    open: openProp,
    defaultOpen,
    value: valueProp,
    defaultValue,
    options: optionsProp,
    buttonRef: handleButtonRef,
    getSerializedValue,
    onChange,
    onOpenChange: handleOpenChange
  });
  const id = useUniqueId.useUniqueId(idProp);
  const labelId = useUniqueId.useUniqueId(setId.setId(idProp, "label"));
  const descriptionId = useUniqueId.useUniqueId(setId.setId(idProp, "description"));
  const errorMessageId = useUniqueId.useUniqueId(setId.setId(idProp, "error"));
  const [validationMessage] = utils.useControlled({
    name: "HvSelect.statusMessage",
    controlled: statusMessage,
    default: "Required"
  });
  const [validationState, setValidationState] = utils.useControlled({
    name: "HvSelect.status",
    controlled: status,
    default: "standBy"
  });
  function handleOpenChange(newOpen) {
    if (!newOpen) {
      const hasValue = multiple ? value.length > 0 : !!value;
      setValidationState(required && !hasValue ? "invalid" : "valid");
    }
    onOpenChange?.(newOpen);
  }
  const canShowError = ariaErrorMessage == null && (status !== void 0 && statusMessage !== void 0 || status === void 0 && required);
  const isInvalid = validationState === "invalid";
  const actualValue = multiple ? value.map((v) => getOptionMetadata(v)).filter((v) => v !== void 0) : getOptionMetadata(value) ?? null;
  const isOpen = open && !!children;
  return /* @__PURE__ */ jsxRuntime.jsxs(
    FormElement.HvFormElement,
    {
      name,
      required,
      disabled,
      readOnly,
      status: validationState,
      className: cx(classes.root, className, {
        [classes.disabled]: disabled,
        [classes.readOnly]: readOnly
      }),
      ...others,
      children: [
        (label || description) && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.labelContainer, children: [
          label && /* @__PURE__ */ jsxRuntime.jsx(
            Label.HvLabel,
            {
              id: labelId,
              htmlFor: id,
              label,
              className: classes.label
            }
          ),
          description && /* @__PURE__ */ jsxRuntime.jsx(InfoMessage.HvInfoMessage, { id: descriptionId, className: classes.description, children: description })
        ] }),
        /* @__PURE__ */ jsxRuntime.jsx(
          SelectButton.HvSelectButton,
          {
            id,
            open: isOpen,
            disabled,
            readOnly,
            className: cx(classes.select, {
              [classes.invalid]: validationState === "invalid"
            }),
            placement,
            "aria-label": ariaLabel,
            "aria-labelledby": mergeIds(label && labelId, ariaLabelledBy),
            "aria-invalid": isInvalid ? true : void 0,
            "aria-errormessage": errorMessageId,
            "aria-describedby": mergeIds(
              description && descriptionId,
              ariaDescribedBy
            ),
            ...getButtonProps(),
            children: defaultRenderValue(actualValue) ?? placeholder
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          Popper.Popper,
          {
            open: isOpen,
            keepMounted: true,
            disablePortal: true,
            anchorEl: buttonRef.current,
            className: classes.popper,
            placement,
            modifiers: [
              {
                enabled: true,
                phase: "main",
                fn: ({ state }) => setPlacement(state.placement)
              }
            ],
            children: /* @__PURE__ */ jsxRuntime.jsx(
              Panel.HvPanel,
              {
                style: {
                  width: variableWidth ? "auto" : (buttonRef.current?.clientWidth || 0) + 2
                },
                className: cx(classes.panel, className, {
                  [classes.panelOpenedUp]: placement.includes("top"),
                  [classes.panelOpenedDown]: placement.includes("bottom")
                }),
                children: /* @__PURE__ */ jsxRuntime.jsx(useSelect.SelectProvider, { value: contextValue, children: /* @__PURE__ */ jsxRuntime.jsx(ListContainer.HvListContainer, { condensed: true, selectable: true, ...getListboxProps(), children }) })
              }
            )
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx("input", { ...getHiddenInputProps(), autoComplete }),
        canShowError && /* @__PURE__ */ jsxRuntime.jsx(
          WarningText.HvWarningText,
          {
            id: errorMessageId,
            disableBorder: true,
            className: classes.error,
            children: validationMessage
          }
        )
      ]
    }
  );
});
exports.selectClasses = Select_styles.staticClasses;
exports.HvSelect = HvSelect;
