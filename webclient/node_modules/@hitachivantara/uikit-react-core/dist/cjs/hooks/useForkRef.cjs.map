{"version":3,"file":"useForkRef.cjs","sources":["../../../src/hooks/useForkRef.ts"],"sourcesContent":["// copied from https://github.com/mui-org/material-ui/blob/03bd73be34424cb2cd17ac602def9ad2b9642de4/packages/material-ui-utils/src/useForkRef.js\nimport * as React from \"react\";\n\nconst setRef = (ref, value) => {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n};\n\nexport const useForkRef = (refA, refB) => {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refA == null && refB == null) {\n      return null;\n    }\n    return (refValue) => {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,SAAS,CAAC,KAAK,UAAU;AACzB,MAAA,OAAO,QAAQ,YAAY;AAC7B,QAAI,KAAK;AAAA,aACA,KAAK;AACd,QAAI,UAAU;AAAA,EAChB;AACF;AAEa,MAAA,aAAa,CAAC,MAAM,SAAS;AAMjC,SAAAA,iBAAM,QAAQ,MAAM;AACrB,QAAA,QAAQ,QAAQ,QAAQ,MAAM;AACzB,aAAA;AAAA,IACT;AACA,WAAO,CAAC,aAAa;AACnB,aAAO,MAAM,QAAQ;AACrB,aAAO,MAAM,QAAQ;AAAA,IAAA;AAAA,EACvB,GACC,CAAC,MAAM,IAAI,CAAC;AACjB;;"}