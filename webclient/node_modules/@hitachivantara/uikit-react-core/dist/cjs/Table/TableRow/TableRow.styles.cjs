"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const uikitStyles = require("@hitachivantara/uikit-styles");
const classes = require("../../utils/classes.cjs");
const utils = require("../utils/utils.cjs");
const { staticClasses, useClasses } = classes.createClasses("HvTableRow", {
  /** Styles applied to the component root class. */
  root: {
    color: "inherit",
    backgroundColor: uikitStyles.theme.colors.atmo1,
    verticalAlign: "middle",
    outline: 0
  },
  /** Styles applied to the component root when inside a `HvTableHead`. */
  head: {},
  /** Styles applied to the component root when inside a `HvTableBody`. */
  body: {},
  /** Styles applied to the component root when inside a `HvTableFooter`. */
  footer: {},
  /** Styles applied to the component root when selected. */
  selected: {
    backgroundColor: uikitStyles.theme.colors.atmo2
  },
  /** Styles applied to the component root when expanded. */
  expanded: {
    backgroundColor: uikitStyles.theme.colors.atmo1,
    "& > *[role=cell]": {
      borderBottom: "none"
    }
  },
  /** Styles applied to the component root when striped. */
  striped: {
    "&:nth-of-type(even)": {
      backgroundColor: uikitStyles.theme.alpha("atmo1", 0.6),
      "&:hover": {
        backgroundColor: uikitStyles.theme.colors.containerBackgroundHover
      }
    },
    "&:nth-of-type(odd)": {
      backgroundColor: "transparent",
      "&:hover": {
        backgroundColor: uikitStyles.theme.colors.containerBackgroundHover
      }
    }
  },
  /** Styles applied to the component root on hover. */
  hover: {
    transition: "background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
    "&:hover": {
      backgroundColor: uikitStyles.theme.colors.containerBackgroundHover
    }
  },
  /** Styles applied to the component root when its table variant is list. */
  variantList: {
    // only applied on custom `display`
    marginBottom: uikitStyles.theme.space.xs,
    borderRadius: uikitStyles.theme.radii.round,
    ...utils.getBorderStyles(uikitStyles.theme.colors.atmo4, uikitStyles.theme.radii.round),
    backgroundColor: uikitStyles.theme.colors.atmo1,
    "&$selected": {
      ...utils.getBorderStyles(uikitStyles.theme.colors.secondary, uikitStyles.theme.radii.round),
      "&:hover": {
        ...utils.getBorderStyles(uikitStyles.theme.colors.atmo4, uikitStyles.theme.radii.round)
      }
    },
    "&:hover": {
      ...utils.getBorderStyles(uikitStyles.theme.colors.atmo4, uikitStyles.theme.radii.round)
    },
    "&.HvIsFocused": {
      borderRadius: uikitStyles.theme.radii.round
    }
  },
  /** Styles applied to the component root when its table variant is list. */
  variantListHead: {
    backgroundColor: "transparent"
  }
});
exports.staticClasses = staticClasses;
exports.useClasses = useClasses;
