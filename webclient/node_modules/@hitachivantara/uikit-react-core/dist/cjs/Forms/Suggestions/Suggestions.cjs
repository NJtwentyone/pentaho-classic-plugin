"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const MuiPopper = require("@mui/material/Popper");
const utils = require("@mui/material/utils");
const setId = require("../../utils/setId.cjs");
const useClickOutside = require("../../hooks/useClickOutside.cjs");
const Suggestions_styles = require("./Suggestions.styles.cjs");
const SelectionList = require("../../SelectionList/SelectionList.cjs");
const ListItem = require("../../ListContainer/ListItem/ListItem.cjs");
const FormElementContext = require("../FormElement/context/FormElementContext.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiPopper__default = /* @__PURE__ */ _interopDefault(MuiPopper);
const HvSuggestions = React.forwardRef((props, extRef) => {
  const {
    id,
    className,
    classes: classesProp,
    expanded = false,
    anchorEl,
    suggestionValues = [],
    onClose,
    onSuggestionSelected,
    ...others
  } = props;
  const { classes, cx } = Suggestions_styles.useClasses(classesProp);
  const { elementId } = React.useContext(FormElementContext.HvFormElementContext);
  const localId = id ?? setId.setId(elementId, "suggestions");
  const ref = React.useRef(null);
  const forkedRef = utils.useForkRef(ref, extRef);
  const [isOpen, setIsOpen] = React.useState(expanded);
  useClickOutside.useClickOutside(ref, (event) => {
    setIsOpen(false);
    onClose?.(event);
  });
  React.useEffect(() => {
    setIsOpen(expanded);
  }, [expanded]);
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      id: localId,
      ref: forkedRef,
      className: cx(classes.root, className),
      ...others,
      children: /* @__PURE__ */ jsxRuntime.jsx(
        MuiPopper__default.default,
        {
          open: isOpen,
          disablePortal: true,
          anchorEl,
          className: classes.popper,
          children: /* @__PURE__ */ jsxRuntime.jsx(
            SelectionList.HvSelectionList,
            {
              className: classes.list,
              id: setId.setId(localId, "list"),
              onChange: onSuggestionSelected,
              children: suggestionValues?.map((item, i) => {
                const itemKey = item.id || setId.setId("item", i);
                return /* @__PURE__ */ jsxRuntime.jsx(
                  ListItem.HvListItem,
                  {
                    value: item,
                    disabled: item.disabled || void 0,
                    children: item.label
                  },
                  itemKey
                );
              })
            }
          )
        }
      )
    }
  );
});
exports.suggestionsClasses = Suggestions_styles.staticClasses;
exports.HvSuggestions = HvSuggestions;
