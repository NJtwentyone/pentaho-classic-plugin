{"version":3,"file":"useSticky.js","sources":["../../../../src/Table/hooks/useSticky.ts"],"sourcesContent":["import { CSSProperties } from \"react\";\nimport {\n  makePropGetter,\n  useGetLatest,\n  Hooks,\n  PropGetter,\n  TableCommonProps,\n} from \"react-table\";\nimport { theme } from \"@hitachivantara/uikit-styles\";\n\n// #region ##### TYPES #####\n\nexport interface UseHvTableStickyTableHeadProps extends TableCommonProps {\n  stickyHeader?: boolean;\n}\n\nexport type HvTableHeadPropGetter<D extends object> = PropGetter<\n  D,\n  UseHvTableStickyTableHeadProps\n>;\n\nexport type UseHvTableStickyTableOptions = {\n  stickyHeader?: boolean;\n  stickyColumns?: boolean;\n};\n\nexport interface UseHvTableStickyHooks<D extends object> {\n  getTableHeadProps: Array<HvTableHeadPropGetter<D>>;\n}\n\nexport interface UseHvTableStickyTableInstance<D extends object> {\n  getTableHeadProps: (\n    propGetter?: HvTableHeadPropGetter<D>\n  ) => UseHvTableStickyTableHeadProps;\n\n  totalRight?: number;\n  hasStickyColumns?: boolean;\n}\n\n// props target: <table>\nexport interface UseHvTableStickyTableProps {\n  stickyHeader?: boolean;\n  stickyColumns?: boolean;\n}\n\n// props target: <table><thead><tr><th>\nexport interface UseHvTableStickyColumnProps {\n  stickyColumn?: boolean;\n  stickyColumnMostLeft?: boolean;\n  stickyColumnLeastRight?: boolean;\n}\n\n// props target: <table><tbody><tr><td>\nexport interface UseHvTableStickyCellProps {\n  stickyColumn?: boolean;\n  stickyColumnMostLeft?: boolean;\n  stickyColumnLeastRight?: boolean;\n}\n\nexport type UseHvTableSticky = (<D extends object = Record<string, unknown>>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\nconst isSticky = (value) => /left|right/i.test(value);\n\nconst getStickyValue = ({ sticky, parent }) => {\n  if (isSticky(sticky)) {\n    return sticky;\n  }\n\n  if (parent != null) {\n    // check if parent is sticky\n    sticky = getStickyValue(parent);\n    if (isSticky(sticky)) {\n      return sticky;\n    }\n\n    const { columns } = parent;\n    // check if any column in the same group is sticky\n    if (columns?.length > 0) {\n      sticky = columns?.find((col) => col.sticky != null)?.sticky;\n      if (isSticky(sticky)) {\n        return sticky;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nconst updateColumnAndParent = (column, props) => {\n  Object.assign(column, props);\n\n  if (column.parent != null) {\n    updateColumnAndParent(column.parent, props);\n  }\n};\n\nconst visibleColumnsHook = (columns, { instance }) => {\n  const toTheLeft: any[] = [];\n  const toTheRight: any[] = [];\n  const others: any[] = [];\n\n  columns.forEach((column) => {\n    const sticky = getStickyValue(column)?.toLowerCase();\n\n    updateColumnAndParent(column, { sticky });\n\n    if (sticky === \"left\") {\n      toTheLeft.push(column);\n    } else if (sticky === \"right\") {\n      toTheRight.push(column);\n    } else {\n      others.push(column);\n    }\n  });\n\n  if (others.length > 0) {\n    const [firstNotSticky] = others;\n    updateColumnAndParent(firstNotSticky, { isFirstNotSticky: true });\n\n    const lastNotSticky = others[others.length - 1];\n    updateColumnAndParent(lastNotSticky, { isLastNotSticky: true });\n  }\n\n  const hasLeftSticky = toTheLeft.length > 0;\n  if (hasLeftSticky) {\n    const lastLeftSticky = toTheLeft[toTheLeft.length - 1];\n\n    updateColumnAndParent(lastLeftSticky, { isLastLeftSticky: true });\n  }\n\n  const hasRightSticky = toTheRight.length > 0;\n  if (hasRightSticky) {\n    const [firstRightSticky] = toTheRight;\n\n    updateColumnAndParent(firstRightSticky, { isFirstRightSticky: true });\n  }\n\n  instance.hasStickyColumns = hasLeftSticky || hasRightSticky;\n\n  return [...toTheLeft, ...others, ...toTheRight];\n};\n\nconst calculateHeaderWidthsToTheRight = (headers, right = 0) => {\n  if (!headers?.length) {\n    return;\n  }\n\n  for (let i = headers.length - 1; i !== -1; i -= 1) {\n    const header = headers[i];\n\n    header.totalRight = right;\n\n    const { headers: subHeaders } = header;\n    if (subHeaders?.length > 0) {\n      calculateHeaderWidthsToTheRight(subHeaders, right);\n    }\n\n    if (header.isVisible) {\n      right += header.totalWidth;\n    }\n  }\n};\n\nconst useInstanceHook = (instance) => {\n  calculateHeaderWidthsToTheRight(instance.headers);\n\n  const getInstance = useGetLatest(instance);\n  instance.getTableHeadProps = makePropGetter(\n    instance.getHooks().getTableHeadProps,\n    {\n      instance: getInstance(),\n    }\n  );\n};\n\nconst getRowProps = () => ({\n  style: {\n    display: \"flex\",\n    flex: \"1 0 auto\",\n  },\n});\n\nconst getCellProps = (header, isHeaderCell: boolean) => {\n  const props: UseHvTableStickyCellProps & { style: CSSProperties } = {\n    style: {\n      display: \"inline-flex\",\n      flex: `${header.totalWidth} ${header.totalMinWidth} auto`,\n      alignItems: isHeaderCell ? \"start\" : \"center\",\n      justifyContent: header.align,\n\n      width: `${header.totalWidth}px`,\n      minWidth: `${header.totalMinWidth}px`,\n      ...(isHeaderCell && { backgroundColor: theme.colors.atmo2 }),\n    },\n  };\n\n  if (header.sticky != null) {\n    props.stickyColumn = true;\n\n    const margin =\n      header.sticky === \"left\" ? header.totalLeft : header.totalRight;\n\n    props.style[header.sticky] = `${margin}px`;\n\n    if (header.isLastLeftSticky) {\n      props.stickyColumnMostLeft = true;\n    }\n\n    if (header.isFirstRightSticky) {\n      props.stickyColumnLeastRight = true;\n    }\n  } else {\n    if (header.isFirstNotSticky) {\n      props.style.borderLeft = 0;\n    }\n\n    if (header.isLastNotSticky) {\n      props.style.borderRight = 0;\n    }\n  }\n\n  return props;\n};\n\n/*\n * STICKY POSITION MANAGEMENT\n *   <thead>: sticky if stickyHeader: true\n *   <tr>: never sticky\n *   <th>: sticky only if that particular column is sticky (left or right)\n */\n\n/*\n * We need to hide the last non sticky column right border, to avoid issues with double borders.\n *\n * This could be done with css, using the `:has()` selector:\n *  - \".not-sticky:has(+ .first-right-sticky)\": { border-right: 0 }\n *\n * Until the `:has()` selector is supported by modern browsers,\n * that at the moment is just a proposal https://developer.mozilla.org/en-US/docs/Web/CSS/:has,\n * we need to override the last not sticky column \"borderRight\" here.\n */\n\n// props target: <table>\nconst getTablePropsHook = (props, { instance }) => {\n  const nextProps: UseHvTableStickyTableProps = {\n    stickyHeader: instance.stickyHeader,\n    stickyColumns: instance.hasStickyColumns,\n  };\n\n  return [props, nextProps];\n};\n\n// props target: <table><thead>\nexport const getTableHeadPropsHook = (props, { instance }) => {\n  const nextProps = {\n    stickyHeader: instance.stickyHeader,\n  };\n\n  return [props, nextProps];\n};\n\n// props target: <table><thead><tr>\nexport const getHeaderGroupPropsHook = (props, { instance }) => {\n  const nextProps = instance.hasStickyColumns ? getRowProps() : {};\n\n  return [props, nextProps];\n};\n\n// props target: <table><thead><tr><th>\nconst getHeaderPropsHook = (props, { instance, column }) => {\n  const nextProps = instance.hasStickyColumns ? getCellProps(column, true) : {};\n\n  return [props, nextProps];\n};\n\n// props target: <table><tbody><tr>\nconst getRowPropsHook = (props, { instance }) => {\n  const nextProps = instance.hasStickyColumns ? getRowProps() : {};\n\n  return [props, nextProps];\n};\n\n// props target: <table><tbody><tr><td>\nconst getCellPropsHook = (props, { instance, cell }) => {\n  const nextProps: UseHvTableStickyCellProps = instance.hasStickyColumns\n    ? getCellProps(cell.column, false)\n    : {};\n\n  return [props, nextProps];\n};\n\nconst useSticky: UseHvTableSticky = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n  hooks.useInstance.push(useInstanceHook);\n\n  // props target: <table>\n  hooks.getTableProps.push(getTablePropsHook);\n  // props target: <table><thead>\n  hooks.getTableHeadProps = [getTableHeadPropsHook];\n  // props target: <table><thead><tr>\n  hooks.getHeaderGroupProps.push(getHeaderGroupPropsHook);\n  // props target: <table><thead><tr><th>\n  hooks.getHeaderProps.push(getHeaderPropsHook);\n  // props target: <table><tbody><tr>\n  hooks.getRowProps.push(getRowPropsHook);\n  // props target: <table><tbody><tr><td>\n  hooks.getCellProps.push(getCellPropsHook);\n};\n\nuseSticky.pluginName = \"useHvTableSticky\";\n\nexport default useSticky;\n"],"names":[],"mappings":"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"}