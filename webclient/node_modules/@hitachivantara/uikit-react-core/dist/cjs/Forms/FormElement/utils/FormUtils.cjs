"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const React = require("react");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const findDescriptors = (children, descriptors = {
  input: [],
  label: [],
  description: [],
  controlled: [],
  errormessage: [],
  // TODO: refactor this out
  HvCalendarHeader: []
}) => {
  React__default.default.Children.forEach(children, (child) => {
    if (child?.type?.formElementType && child.props?.id) {
      descriptors[child.type.formElementType]?.push({
        id: child.props?.id,
        htmlFor: child.props?.htmlFor
      });
    }
    if (child?.type?.formElementType !== "formelement") {
      findDescriptors(child?.props?.children, descriptors);
    }
  });
  return descriptors;
};
const getIdReferenceListFor = (formElementType, descriptors, filterFor = null) => {
  const referenceList = descriptors?.[formElementType]?.filter((d) => d.htmlFor !== filterFor)?.map((d) => d.id).join(" ").trim();
  return referenceList !== "" ? referenceList : void 0;
};
const getIdReferenceFor = (formElementType, descriptors, filterFor = null) => {
  const referenceList = descriptors?.[formElementType]?.filter((d) => d.htmlFor !== filterFor)?.map((d) => d.id)?.[0];
  return referenceList !== "" ? referenceList : void 0;
};
const buildFormElementPropsFromContext = (name, disabled, readOnly, required, context) => {
  return {
    name: name || context?.elementName,
    disabled: disabled !== void 0 ? disabled : context?.elementDisabled,
    readOnly: readOnly !== void 0 ? readOnly : context?.elementReadOnly,
    required: required !== void 0 ? required : context?.elementRequired,
    status: context?.elementStatus
  };
};
const buildAriaPropsFromContext = (props, context, isInvalid, inputId) => {
  const arias = {
    "aria-labelledby": props?.["aria-labelledby"] !== void 0 ? props?.["aria-labelledby"] : getIdReferenceListFor("label", context?.descriptors, inputId),
    "aria-describedby": props?.["aria-describedby"] !== void 0 ? props?.["aria-describedby"] : getIdReferenceListFor("description", context?.descriptors),
    "aria-controls": props?.["aria-controls"] !== void 0 ? props?.["aria-controls"] : getIdReferenceListFor("controlled", context?.descriptors)
  };
  if (isInvalid) {
    arias["aria-invalid"] = isInvalid;
    arias["aria-errormessage"] = props?.["aria-errormessage"] !== void 0 ? props?.["aria-errormessage"] : getIdReferenceFor("errormessage", context?.descriptors);
  }
  return arias;
};
exports.buildAriaPropsFromContext = buildAriaPropsFromContext;
exports.buildFormElementPropsFromContext = buildFormElementPropsFromContext;
exports.findDescriptors = findDescriptors;
exports.getIdReferenceFor = getIdReferenceFor;
exports.getIdReferenceListFor = getIdReferenceListFor;
