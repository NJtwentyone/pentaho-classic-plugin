{"version":3,"file":"IconBase.js","sources":["../../src/IconBase.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { theme, getColor, HvColorAny } from \"@hitachivantara/uikit-styles\";\n\nimport { isSemantic, isXS } from \"./utils\";\n\nconst getDims = (size: number) => ({ width: size, height: size });\n\nexport const getColorVars = (colorArray: string[]) => {\n  return colorArray.reduce((acc, value, index) => {\n    acc[`--color-${index}`] = value;\n    return acc;\n  }, {} as Record<string, string>);\n};\n\nexport const getIconSize = (\n  iconSize?: IconSize,\n  hasSpecialSize?: boolean,\n  width?: number,\n  height?: number\n) => {\n  if (width && height) return { width, height };\n\n  const calcSize = (size: number) => (hasSpecialSize ? size + 8 : size);\n\n  switch (iconSize) {\n    case \"XS\":\n      return getDims(calcSize(12));\n    // eslint-disable-next-line default-case-last\n    default:\n    case \"S\":\n      return getDims(calcSize(16));\n    case \"M\":\n      return getDims(calcSize(32));\n    case \"L\":\n      return getDims(calcSize(96));\n  }\n};\n\nexport const getIconColors = (\n  palette: string[] = [],\n  color?: HvColorAny | HvColorAny[],\n  semantic?: string,\n  inverted = false\n) => {\n  const colorArray = palette;\n\n  if (typeof color === \"string\") {\n    colorArray[0] = getColor(color)!;\n  } else if (Array.isArray(color)) {\n    colorArray.forEach((_, i) => {\n      colorArray[i] = getColor(color[i])!;\n    });\n  }\n\n  if (semantic) {\n    colorArray[0] = theme.colors?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    // eslint-disable-next-line prefer-destructuring\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  return colorArray;\n};\n\n/** Splits icon `props` between those to be passed to container or svg */\nexport const splitIconProps = (iconName: string, props: IconBaseProps) => {\n  const {\n    role,\n    title,\n    iconSize: iconSizeProp,\n    width,\n    height,\n    svgProps,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    ...rest\n  } = props;\n  const iconSize = iconSizeProp ?? (isXS(iconName) ? \"XS\" : \"S\");\n  const size = getIconSize(iconSize, isSemantic(iconName), width, height);\n\n  const newSvgProps: React.HTMLAttributes<SVGElement> = {\n    focusable: false,\n    // pass size props\n    ...size,\n    // pass a11y props\n    title,\n    role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    // pass all other `svgProps`\n    ...svgProps,\n  };\n\n  const newOtherProps: IconBaseProps = {\n    iconSize,\n    ...rest,\n  };\n\n  return [newSvgProps, newOtherProps] as const;\n};\n\nexport type IconSize = \"XS\" | \"S\" | \"M\" | \"L\";\n\nexport interface IconBaseProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"color\"> {\n  /**\n   * A color or array of colors to override the default icon colors.\n   * Accepts any valid CSS color or color from the UI Kit palette.\n   * @example [\"brand\", \"inherit\"]\n   */\n  color?: HvColorAny | HvColorAny[];\n  /** Sets one of the standard sizes of the icons */\n  iconSize?: IconSize;\n  /** A string that will override the viewbox of the svg */\n  viewbox?: string;\n  /** A string that will override the height of the svg */\n  height?: number;\n  /** A string that will override the width of the svg */\n  width?: number;\n  /**\n   * Sets one of the standard semantic palette colors of the icon\n   * @deprecated use the `color` prop instead\n   */\n  semantic?: string;\n  /**\n   * Inverts the background-foreground on semantic icons\n   * @deprecated use the `color` prop instead\n   */\n  inverted?: boolean;\n  /** Props passed down to the svg element. */\n  svgProps?: React.SVGProps<SVGSVGElement>;\n}\n\nexport const StyledIconBase = styled(\"div\")(\n  ({ iconSize }: { iconSize: IconSize }) => ({\n    display: \"flex\",\n    \"& svg\": {\n      margin: \"auto\",\n      color: \"inherit\",\n    },\n    ...(iconSize === \"XS\" && getDims(32)),\n    ...(iconSize === \"S\" && getDims(32)),\n    ...(iconSize === \"M\" && getDims(48)),\n    ...(iconSize === \"L\" && getDims(112)),\n  })\n);\n\nexport type IconType = React.FC<IconBaseProps>;\n\nexport const IconBase = ({\n  children,\n  palette,\n  height,\n  width,\n  color,\n  semantic,\n  inverted = false,\n  iconSize = \"S\",\n  iconName,\n  style,\n  ...others\n}: IconBaseProps & { palette: string[]; iconName: string }) => {\n  const colorArray = getIconColors(palette, color, semantic, inverted);\n  const colorVars = getColorVars(colorArray);\n\n  return (\n    <StyledIconBase\n      data-name={iconName}\n      iconSize={iconSize}\n      style={{ ...colorVars, ...style }}\n      {...others}\n    >\n      {children}\n    </StyledIconBase>\n  );\n};\n"],"names":[],"mappings":";;;;AAMA,MAAM,UAAU,CAAC,UAAkB,EAAE,OAAO,MAAM,QAAQ,KAAK;AAElD,MAAA,eAAe,CAAC,eAAyB;AACpD,SAAO,WAAW,OAAO,CAAC,KAAK,OAAO,UAAU;AAC1C,QAAA,WAAW,KAAK,EAAE,IAAI;AACnB,WAAA;AAAA,EACT,GAAG,CAA4B,CAAA;AACjC;AAEO,MAAM,cAAc,CACzB,UACA,gBACA,OACA,WACG;AACH,MAAI,SAAS;AAAe,WAAA,EAAE,OAAO;AAErC,QAAM,WAAW,CAAC,SAAkB,iBAAiB,OAAO,IAAI;AAEhE,UAAQ,UAAU;AAAA,IAChB,KAAK;AACI,aAAA,QAAQ,SAAS,EAAE,CAAC;AAAA,IAE7B;AAAA,IACA,KAAK;AACI,aAAA,QAAQ,SAAS,EAAE,CAAC;AAAA,IAC7B,KAAK;AACI,aAAA,QAAQ,SAAS,EAAE,CAAC;AAAA,IAC7B,KAAK;AACI,aAAA,QAAQ,SAAS,EAAE,CAAC;AAAA,EAC/B;AACF;AAEa,MAAA,gBAAgB,CAC3B,UAAoB,IACpB,OACA,UACA,WAAW,UACR;AACH,QAAM,aAAa;AAEf,MAAA,OAAO,UAAU,UAAU;AAClB,eAAA,CAAC,IAAI,SAAS,KAAK;AAAA,EACrB,WAAA,MAAM,QAAQ,KAAK,GAAG;AACpB,eAAA,QAAQ,CAAC,GAAG,MAAM;AAC3B,iBAAW,CAAC,IAAI,SAAS,MAAM,CAAC,CAAC;AAAA,IAAA,CAClC;AAAA,EACH;AAEA,MAAI,UAAU;AACZ,eAAW,CAAC,IAAI,MAAM,SAAS,QAAQ,KAAK,WAAW,CAAC;AAAA,EAC1D;AAEI,MAAA,YAAY,WAAW,CAAC,GAAG;AAElB,eAAA,CAAC,IAAI,WAAW,CAAC;AAC5B,eAAW,CAAC,IAAI;AAAA,EAClB;AAEO,SAAA;AACT;AAGa,MAAA,iBAAiB,CAAC,UAAkB,UAAyB;AAClE,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd,mBAAmB;AAAA,IACnB,oBAAoB;AAAA,IACpB,GAAG;AAAA,EACD,IAAA;AACJ,QAAM,WAAW,iBAAiB,KAAK,QAAQ,IAAI,OAAO;AAC1D,QAAM,OAAO,YAAY,UAAU,WAAW,QAAQ,GAAG,OAAO,MAAM;AAEtE,QAAM,cAAgD;AAAA,IACpD,WAAW;AAAA;AAAA,IAEX,GAAG;AAAA;AAAA,IAEH;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd,mBAAmB;AAAA,IACnB,oBAAoB;AAAA;AAAA,IAEpB,GAAG;AAAA,EAAA;AAGL,QAAM,gBAA+B;AAAA,IACnC;AAAA,IACA,GAAG;AAAA,EAAA;AAGE,SAAA,CAAC,aAAa,aAAa;AACpC;AAkCa,MAAA,iBAAiB,OAAO,KAAK;AAAA,EACxC,CAAC,EAAE,SAAA,OAAwC;AAAA,IACzC,SAAS;AAAA,IACT,SAAS;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA,GAAI,aAAa,QAAQ,QAAQ,EAAE;AAAA,IACnC,GAAI,aAAa,OAAO,QAAQ,EAAE;AAAA,IAClC,GAAI,aAAa,OAAO,QAAQ,EAAE;AAAA,IAClC,GAAI,aAAa,OAAO,QAAQ,GAAG;AAAA,EAAA;AAEvC;AAIO,MAAM,WAAW,CAAC;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AAAA,EACX,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAA+D;AAC7D,QAAM,aAAa,cAAc,SAAS,OAAO,UAAU,QAAQ;AAC7D,QAAA,YAAY,aAAa,UAAU;AAGvC,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,aAAW;AAAA,MACX;AAAA,MACA,OAAO,EAAE,GAAG,WAAW,GAAG,MAAM;AAAA,MAC/B,GAAG;AAAA,MAEH;AAAA,IAAA;AAAA,EAAA;AAGP;"}