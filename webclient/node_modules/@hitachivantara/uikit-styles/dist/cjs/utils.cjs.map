{"version":3,"file":"utils.cjs","sources":["../../src/utils.ts"],"sourcesContent":["import type {\n  DeepString,\n  HvThemeStructure,\n  HvThemeVars,\n  SpacingValue,\n} from \"./types\";\n\nexport const spacingUtil = (value: SpacingValue, vars: HvThemeVars): string => {\n  switch (typeof value) {\n    case \"number\":\n      return `calc(${vars.space.base} * ${value}px)`;\n    case \"string\":\n      return vars.space[value] || value;\n    default:\n      return value;\n  }\n};\n\n// TODO: remove in favour or `spacingUtil` in v6\nexport const spacingUtilOld = (\n  value: SpacingValue,\n  vars: HvThemeVars\n): string => {\n  switch (typeof value) {\n    case \"number\":\n      return `${value}px`;\n    case \"string\":\n      return vars.space[value] || value;\n    default:\n      return \"0px\";\n  }\n};\n\nconst toCSSVars = (obj: object, prefix = \"--uikit\") => {\n  const vars = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"object\") {\n      const nestedVars = toCSSVars(value, `${prefix}-${key}`);\n\n      for (const [nestedKey, nestedValue] of Object.entries(nestedVars)) {\n        vars[nestedKey] = nestedValue;\n      }\n    } else {\n      vars[`${prefix}-${key}`] = value;\n    }\n  }\n\n  return vars;\n};\n\nexport const hasMultipleArgs = <T extends any>(\n  args: T[] | [T[]]\n): args is T[] => {\n  return args.length > 1;\n};\n\nexport const mapCSSVars = <T extends object>(\n  obj: T,\n  prefix: string = \"--uikit\"\n): DeepString<T> => {\n  const vars = {} as DeepString<T>;\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"object\") {\n      vars[key] = mapCSSVars(value, `${prefix}-${key}`);\n    } else {\n      vars[key] = `var(${prefix}-${key})`;\n    }\n  }\n\n  return vars;\n};\n\nexport const mergeTheme = (...objects) => {\n  const isObject = (obj) => obj && typeof obj === \"object\";\n\n  return objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n\n      if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = pVal ? oVal : mergeTheme(pVal, oVal);\n      } else {\n        prev[key] = oVal;\n      }\n    });\n\n    return prev;\n  }, {});\n};\n\nexport const parseTheme = (\n  themes: HvThemeStructure[],\n  theme: string = \"\",\n  colorMode: string = \"\"\n): {\n  theme: HvThemeStructure;\n  selectedTheme: string;\n  selectedMode: string;\n  colorModes: string[];\n  colorScheme: string;\n} => {\n  const names: string[] = themes.map((t) => t.name);\n  const selectedTheme: string = names.includes(theme) ? theme : names[0];\n  const themeStructure: HvThemeStructure =\n    themes.find((t) => t.name === selectedTheme) || themes[0];\n  const colorModes: string[] = Object.keys(themeStructure.colors.modes);\n  const selectedMode: string = colorModes.includes(colorMode)\n    ? colorMode\n    : colorModes[0];\n  const colorScheme = themeStructure.colors.modes[selectedMode].type;\n\n  return {\n    theme: themeStructure,\n    selectedTheme,\n    selectedMode,\n    colorModes,\n    colorScheme,\n  };\n};\n\nexport const getThemesList = (themes: object) => {\n  const list = {};\n\n  Object.keys(themes).forEach((themeName) => {\n    const theme = themes[themeName];\n    const colorModes = Object.keys(theme.colors.modes);\n\n    list[themeName] = {\n      colorModes: {},\n    };\n\n    colorModes.forEach((colorMode) => {\n      list[themeName].colorModes[colorMode] = toCSSVars({\n        ...theme,\n        colors: {\n          ...theme.colors.modes[colorMode],\n        },\n      });\n    });\n  });\n\n  return list;\n};\n\n/**\n * Takes a color and returns the R G B channels if possible\n * @param color - Color\n * @returns R G B channels if possible\n */\nconst colorToRgb = (color: string) => {\n  // Matches rgba\n  const rgbaRegex =\n    /^rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/g;\n\n  // Matches rgb\n  const rgbRegex =\n    /^rgb\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*\\)$/g;\n\n  const match = color.trim().match(rgbaRegex) || color.trim().match(rgbRegex);\n\n  if (match) {\n    const channels = match[0].replace(/rgba|rgb|\\(|\\)/g, \"\").split(\",\");\n    if (channels.length > 3) {\n      channels.pop();\n    }\n    return channels.join(\" \");\n  }\n\n  // Matches hex color with 3, 4, 6 or 8 digits\n  const hexRegex =\n    /^(?:#)(?:[a-f0-9]{3}|[a-f0-9]{4}|[a-f0-9]{6}|[a-f0-9]{8})$/gi;\n\n  const hexMatch = color.trim().match(hexRegex);\n\n  if (!hexMatch) return;\n\n  let value = hexMatch[0].replace(\"#\", \"\");\n  if (value.length === 3 || value.length === 4) {\n    value = Array.from(value)\n      .map((d) => `${d}${d}`)\n      .join(\"\");\n  }\n\n  return [\n    parseInt(value.substring(0, 2), 16),\n    parseInt(value.substring(2, 4), 16),\n    parseInt(value.substring(4, 6), 16),\n  ].join(\" \");\n};\n\nexport const getThemesVars = (themes: HvThemeStructure[]) => {\n  const vars = {};\n\n  themes.forEach((theme) => {\n    const colorModes = Object.keys(theme.colors.modes);\n\n    colorModes.forEach((colorMode) => {\n      const styleName = `[data-theme=\"${theme.name}\"][data-color-mode=\"${colorMode}\"]`;\n\n      // Extracting \"components\" and \"name\" because they shouldn't be mapped to CSS vars\n      const { components, name, colors, ...rest } = theme;\n\n      const rgbColors = Object.entries(colors.modes[colorMode]).reduce(\n        (acc, [key, value]) => {\n          const rgb = colorToRgb(value);\n          if (rgb) acc[key] = rgb;\n          return acc;\n        },\n        {}\n      );\n\n      vars[styleName] = toCSSVars({\n        ...rest,\n        colors: {\n          ...colors.modes[colorMode],\n        },\n        // Colors as R G B channels\n        rgb: {\n          ...rgbColors,\n        },\n      });\n    });\n  });\n\n  return vars;\n};\n"],"names":[],"mappings":"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"}