import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { useState, useRef } from "react";
import uniqueId from "lodash/uniqueId";
import { Doc } from "@hitachivantara/uikit-react-icons";
import { setId } from "../../utils/setId.js";
import { useUniqueId } from "../../hooks/useUniqueId.js";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { convertUnits } from "../utils.js";
import { useClasses } from "./DropZone.styles.js";
import { staticClasses } from "./DropZone.styles.js";
import { HvLabel } from "../../Forms/Label/Label.js";
import { HvInfoMessage } from "../../Forms/InfoMessage/InfoMessage.js";
import { HvTypography } from "../../Typography/Typography.js";
function validateAccept(file, acceptAttr) {
  if (!file || !acceptAttr)
    return true;
  const acceptEntries = acceptAttr.split(",");
  const fileName = file.name || "";
  const mimeType = (file.type || "").toLowerCase();
  const baseMimeType = mimeType.replace(/\/.*$/, "");
  return acceptEntries.some((type) => {
    const validType = type.trim().toLowerCase();
    if (validType.charAt(0) === ".") {
      return fileName.toLowerCase().endsWith(validType);
    }
    if (validType.endsWith("/*")) {
      return baseMimeType === validType.replace(/\/.*$/, "");
    }
    return mimeType === validType;
  });
}
const HvDropZone = (props) => {
  const {
    id: idProp,
    classes: classesProp,
    labels,
    accept,
    maxFileSize,
    inputProps,
    hideLabels,
    multiple = true,
    disabled = false,
    onFilesAdded
  } = useDefaultProps("HvDropZone", props);
  const id = useUniqueId(idProp, "dropzone");
  const { classes, cx } = useClasses(classesProp);
  const [dragState, setDragState] = useState(false);
  const inputRef = useRef(null);
  const handleDragLeave = () => {
    setDragState(false);
  };
  const handleDragEnter = (event) => {
    if (disabled)
      return;
    event.stopPropagation();
    event.preventDefault();
    setDragState(true);
  };
  const onChangeHandler = (filesList) => {
    const filesToProcess = Object.values(filesList);
    const newFiles = filesToProcess.map((file) => {
      const newFile = new File([file], file.name, {
        type: file.type,
        lastModified: file.lastModified
      });
      newFile.id = uniqueId("uploaded-file-data-");
      const isSizeAllowed = file.size <= maxFileSize;
      const isFileAccepted = !accept || accept.includes(file.type?.split("/")[1]) || // TODO: remove in v6
      validateAccept(file, accept);
      if (!isFileAccepted) {
        newFile.errorMessage = labels?.fileTypeError;
        newFile.status = "fail";
      } else if (!isSizeAllowed) {
        newFile.errorMessage = labels?.fileSizeError;
        newFile.status = "fail";
      }
      return newFile;
    });
    onFilesAdded?.(newFiles);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    !hideLabels && /* @__PURE__ */ jsxs("div", { id, className: classes.dropZoneLabelsGroup, children: [
      /* @__PURE__ */ jsx(
        HvLabel,
        {
          id: setId(id, "input-file-label"),
          htmlFor: setId(id, "input-file"),
          label: labels?.dropzone,
          className: classes.dropZoneLabel
        }
      ),
      /* @__PURE__ */ jsxs(HvInfoMessage, { id: setId(id, "description"), children: [
        Number.isInteger(maxFileSize) && `${labels?.sizeWarning} ${convertUnits(maxFileSize)}`,
        labels?.acceptedFiles ? labels.acceptedFiles : accept && ` (${accept?.replaceAll(",", ", ")})`
      ] })
    ] }),
    /* @__PURE__ */ jsxs(
      "div",
      {
        id: setId(id, "input-file-container"),
        className: cx(classes.dropZoneContainer, {
          [classes.dragAction]: dragState,
          [classes.dropZoneContainerDisabled]: disabled
        }),
        children: [
          /* @__PURE__ */ jsx(
            "input",
            {
              id: setId(id, "input-file"),
              className: classes.inputArea,
              type: "file",
              multiple,
              disabled,
              title: !disabled ? `${labels?.drag} ${labels?.selectFiles}` : "",
              onClick: () => {
                if (inputRef.current) {
                  inputRef.current.value = "";
                }
              },
              onChange: () => {
                if (!disabled && inputRef.current?.files) {
                  onChangeHandler(inputRef.current.files);
                }
              },
              onDragEnter: handleDragEnter,
              onDragOver: handleDragEnter,
              onDragLeave: handleDragLeave,
              onDropCapture: handleDragLeave,
              onDrop: (event) => {
                if (disabled)
                  return;
                const { files } = event.dataTransfer;
                if (multiple === true || files.length === 1) {
                  event.stopPropagation();
                  event.preventDefault();
                  onChangeHandler(files);
                }
              },
              ref: inputRef,
              accept,
              ...inputProps
            }
          ),
          /* @__PURE__ */ jsx("div", { className: classes?.dropArea, children: dragState ? /* @__PURE__ */ jsx("div", { className: classes.dropZoneAreaLabels, children: /* @__PURE__ */ jsx(HvTypography, { className: classes.dragText, children: labels?.dropFiles }) }) : /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(
              Doc,
              {
                iconSize: "M",
                className: classes.dropZoneAreaIcon,
                color: disabled ? "secondary_60" : "secondary"
              }
            ),
            /* @__PURE__ */ jsx("div", { className: classes.dropZoneAreaLabels, children: /* @__PURE__ */ jsxs(HvTypography, { className: classes.dragText, children: [
              labels?.drag,
              /* @__PURE__ */ jsx(
                "span",
                {
                  className: classes.selectFilesText,
                  children: ` ${labels?.selectFiles}`
                }
              )
            ] }) })
          ] }) })
        ]
      }
    )
  ] });
};
export {
  HvDropZone,
  staticClasses as dropZoneClasses
};
