import { jsx } from "@emotion/react/jsx-runtime";
import { forwardRef } from "react";
import { DropDownXS } from "@hitachivantara/uikit-react-icons";
import { theme } from "@hitachivantara/uikit-styles";
import { useDefaultProps } from "../hooks/useDefaultProps.js";
import { createClasses } from "../utils/classes.js";
import { HvButton } from "../Button/Button.js";
const { staticClasses, useClasses } = createClasses("HvSelectButton", {
  root: {
    width: "100%",
    minWidth: "unset",
    userSelect: "none",
    position: "relative",
    paddingLeft: theme.space.xs,
    justifyContent: "flex-start"
  },
  disabled: {},
  readOnly: {
    userSelect: "text",
    backgroundColor: theme.colors.atmo2
  },
  open: {
    backgroundColor: theme.colors.atmo1
  },
  openUp: {
    borderRadius: `0px 0px ${theme.radii.base} ${theme.radii.base}`
  },
  openDown: {
    borderRadius: `${theme.radii.base} ${theme.radii.base} 0px 0px`
  },
  selection: {
    color: "inherit",
    flex: 1,
    textAlign: "start",
    overflow: "clip visible",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  },
  placeholder: {},
  arrowContainer: {
    marginRight: theme.spacing(-2)
  },
  arrow: {
    transition: "rotate 0.2s ease"
  }
});
const HvSelectButton = forwardRef((props, ref) => {
  const {
    classes: classesProp,
    className,
    open,
    placement = "bottom",
    disabled,
    readOnly,
    children,
    adornment,
    ...others
  } = useDefaultProps("HvSelectButton", props);
  const { classes, cx } = useClasses(classesProp);
  const endIcon = adornment ?? /* @__PURE__ */ jsx(
    DropDownXS,
    {
      iconSize: "XS",
      style: { rotate: open ? "180deg" : void 0 },
      className: classes.arrow
    }
  );
  return /* @__PURE__ */ jsx(
    HvButton,
    {
      ref,
      variant: "secondarySubtle",
      disabled: disabled || readOnly,
      className: cx(classes.root, className, {
        [classes.open]: open,
        [classes.openUp]: open && placement.includes("top"),
        [classes.openDown]: open && placement.includes("bottom"),
        [classes.disabled]: disabled,
        [classes.readOnly]: readOnly
      }),
      classes: { endIcon: classes.arrowContainer },
      endIcon,
      ...others,
      children: /* @__PURE__ */ jsx("div", { className: classes.selection, children: children && typeof children === "string" ? /* @__PURE__ */ jsx("div", { className: classes.placeholder, children }) : children })
    }
  );
});
export {
  HvSelectButton,
  staticClasses,
  useClasses
};
