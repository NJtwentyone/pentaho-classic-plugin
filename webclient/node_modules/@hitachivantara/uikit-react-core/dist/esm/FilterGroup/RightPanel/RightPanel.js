import { jsx, jsxs, Fragment } from "@emotion/react/jsx-runtime";
import { useState, useContext, useMemo, useCallback, useEffect } from "react";
import cloneDeep from "lodash/cloneDeep";
import { setId } from "../../utils/setId.js";
import { HvFilterGroupContext } from "../FilterGroupContext.js";
import { useClasses } from "./RightPanel.styles.js";
import { staticClasses } from "./RightPanel.styles.js";
import { HvTypography } from "../../Typography/Typography.js";
import { HvCheckBox } from "../../CheckBox/CheckBox.js";
import { HvPanel } from "../../Panel/Panel.js";
import { HvInput } from "../../Input/Input.js";
import { HvList } from "../../List/List.js";
const HvFilterGroupRightPanel = ({
  id,
  className,
  labels,
  emptyElement,
  classes: classesProp
}) => {
  const { classes } = useClasses(classesProp);
  const [searchStr, setSearchStr] = useState("");
  const [allSelected, setAllSelected] = useState(false);
  const [anySelected, setAnySelected] = useState(false);
  const {
    filterOptions,
    filterValues = [],
    setFilterValues,
    activeGroup
  } = useContext(HvFilterGroupContext);
  const { all: allActiveGroupOptions, enabled: enabledActiveGroupOptions } = useMemo(() => {
    const filteredOptions = filterOptions[activeGroup]?.data.filter(
      (option) => option.name.toLowerCase().includes(searchStr.toLowerCase())
    );
    return {
      all: filteredOptions.map((option) => option.id) || [],
      enabled: filteredOptions.filter((option) => !option.disabled).map((option) => option.id) || []
    };
  }, [filterOptions, activeGroup, searchStr]);
  const activeFilterValues = useMemo(
    () => filterValues[activeGroup]?.filter(
      (value) => allActiveGroupOptions.includes(value)
    ) || [],
    [filterValues, allActiveGroupOptions, activeGroup]
  );
  const listValues = useMemo(
    () => filterOptions[activeGroup]?.data.map((option) => ({
      ...option,
      label: option.name,
      selected: filterValues[activeGroup]?.includes(option.id),
      isHidden: option.name.toLowerCase().indexOf(searchStr.toLowerCase()) < 0
    })) || [],
    [filterOptions, filterValues, activeGroup, searchStr]
  );
  const updateSelectAll = useCallback(() => {
    const nbrSelected = activeFilterValues?.length;
    const hasSelection = nbrSelected > 0;
    const allSelect = nbrSelected === allActiveGroupOptions.length;
    setAnySelected(hasSelection);
    setAllSelected(hasSelection && allSelect);
  }, [activeFilterValues, allActiveGroupOptions]);
  useEffect(() => {
    updateSelectAll();
  }, [activeFilterValues, updateSelectAll]);
  useEffect(() => setSearchStr(""), [activeGroup]);
  const onChangeHandler = (values) => {
    const newFilterValues = filterOptions.map(
      (_, i) => activeGroup === i ? values.filter((v) => v.selected).map((v) => v.id) : [...filterValues[i] || []]
    );
    setFilterValues(newFilterValues);
  };
  const handleSelectAll = useCallback(() => {
    const newFilterValues = cloneDeep(filterValues);
    if (anySelected) {
      if (searchStr !== "") {
        newFilterValues[activeGroup] = filterValues[activeGroup]?.filter(
          (value) => !enabledActiveGroupOptions.includes(value)
        );
      } else {
        newFilterValues[activeGroup] = [];
      }
    } else {
      const currentOptions = newFilterValues[activeGroup] || [];
      newFilterValues[activeGroup] = [
        ...currentOptions,
        ...enabledActiveGroupOptions
      ];
    }
    setFilterValues(newFilterValues);
  }, [
    activeGroup,
    enabledActiveGroupOptions,
    anySelected,
    filterValues,
    setFilterValues,
    searchStr
  ]);
  const SelectAll = useCallback(() => {
    const nbrSelected = activeFilterValues?.length;
    const defaultLabel = /* @__PURE__ */ jsx(HvTypography, { component: "span", children: nbrSelected > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("b", { children: nbrSelected }),
      ` ${labels?.multiSelectionConjunction} ${allActiveGroupOptions.length}`
    ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("b", { children: labels?.selectAll }),
      ` (${allActiveGroupOptions.length})`
    ] }) });
    return /* @__PURE__ */ jsx("div", { className: classes.selectAllContainer, children: /* @__PURE__ */ jsx(
      HvCheckBox,
      {
        id: setId(id, "select-all"),
        label: defaultLabel,
        onChange: () => handleSelectAll(),
        className: classes.selectAll,
        indeterminate: anySelected && !allSelected,
        checked: allSelected
      }
    ) });
  }, [
    activeFilterValues?.length,
    allActiveGroupOptions.length,
    allSelected,
    anySelected,
    handleSelectAll,
    id,
    labels,
    classes?.selectAllContainer,
    classes?.selectAll
  ]);
  return /* @__PURE__ */ jsx(HvPanel, { id: setId(id, "rightPanel"), className, children: listValues.length > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      HvInput,
      {
        id: setId(id, "search"),
        classes: {
          root: classes.search
        },
        type: "search",
        placeholder: labels?.searchBoxPlaceholder,
        value: searchStr,
        onChange: (_, str) => setSearchStr(str)
      }
    ),
    /* @__PURE__ */ jsx(SelectAll, {}),
    /* @__PURE__ */ jsx(
      HvList,
      {
        id: setId(id, "list"),
        values: listValues,
        className: classes.list,
        multiSelect: true,
        useSelector: true,
        showSelectAll: false,
        onChange: onChangeHandler,
        selectable: true,
        condensed: true,
        hasTooltips: true
      },
      activeGroup
    )
  ] }) : emptyElement });
};
export {
  HvFilterGroupRightPanel,
  staticClasses as filterGroupRightPanelClasses
};
