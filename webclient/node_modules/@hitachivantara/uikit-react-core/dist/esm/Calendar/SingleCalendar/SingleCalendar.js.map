{"version":3,"file":"SingleCalendar.js","sources":["../../../../src/Calendar/SingleCalendar/SingleCalendar.tsx"],"sourcesContent":["import { useState, useMemo } from \"react\";\n\nimport { isKey } from \"../../utils/keyboardUtils\";\nimport { setId } from \"../../utils/setId\";\n\nimport { ExtractNames } from \"../../utils/classes\";\nimport { HvTypography } from \"../../Typography\";\n\nimport { ViewMode } from \"../enums\";\nimport { isRange, isDate, getWeekdayNamesList } from \"../utils\";\nimport { generateCalendarModel } from \"../model\";\nimport { HvComposedNavigation, HvMonthSelector } from \"../CalendarNavigation\";\nimport { DateRangeProp, VisibilitySelectorActions } from \"../types\";\n\nimport { HvCalendarCell } from \"./CalendarCell\";\nimport { HvCalendarHeader } from \"../CalendarHeader/CalendarHeader\";\n\nimport { staticClasses, useClasses } from \"./SingleCalendar.styles\";\n\nexport { staticClasses as singleCalendarClasses };\n\nexport type HvSingleCalendarClasses = ExtractNames<typeof useClasses>;\n\nexport const HvSingleCalendar = ({\n  classes: classesProp,\n  className,\n  id,\n  locale = \"en-US\",\n  value,\n  visibleMonth,\n  visibleYear,\n  minimumDate,\n  maximumDate,\n  onChange,\n  onInputChange,\n  onVisibleDateChange,\n  showEndDate,\n  showDayOfWeek,\n  invalidDateLabel,\n  children,\n  ...others\n}: HvSingleCalendarProps) => {\n  // TODO: refactor this out\n  // const { HvCalendarHeader } = useContext(HvFormElementDescriptorsContext);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const today = new Date();\n  const localValue = value ?? today;\n\n  const [calViewMode, setCalViewMode] = useState<ViewMode>(\"calendar\");\n\n  const rangeMode = isRange(localValue);\n  const isDateSelectionMode = rangeMode && !isDate(localValue.endDate);\n  const calModel = rangeMode\n    ? generateCalendarModel(localValue.startDate, visibleMonth, visibleYear)\n    : generateCalendarModel(localValue, visibleMonth, visibleYear);\n  const firstDayOfCurrentMonth = new Date(calModel.year, calModel.month - 1, 1);\n  const firstDayOfCurrentMonthTime = firstDayOfCurrentMonth.getTime();\n\n  const listWeekdayNames = useMemo(() => getWeekdayNamesList(locale), [locale]);\n\n  const handleChange = (event: any, date: Date | DateRangeProp) => {\n    event?.preventDefault();\n    onChange?.(event, date);\n  };\n\n  const handleInputChange = (event: any, date: any) => {\n    event?.preventDefault();\n    onInputChange?.(event, date);\n  };\n\n  const getNavChild = (event: KeyboardEvent, siblings: any, i: number) => {\n    if (isKey(event, \"ArrowLeft\")) return siblings[i - 1];\n    if (isKey(event, \"ArrowRight\")) return siblings[i + 1];\n    if (isKey(event, \"ArrowUp\")) return siblings[i - 7];\n    if (isKey(event, \"ArrowDown\")) return siblings[i + 7];\n    return undefined;\n  };\n\n  const handleKeyDown = (event: any) => {\n    // This code is very brittle and should be managed with the focus wrapper\n    const el = document?.activeElement;\n    const parent = el?.parentElement?.parentElement;\n    const siblings =\n      parent != null\n        ? Array.from(\n            parent.getElementsByClassName(classes.cellContainer as string)\n          )\n        : [];\n    const elIndex = el ? siblings.indexOf(el) : 0;\n\n    if (isKey(event, \"Enter\")) {\n      (el as HTMLElement).focus();\n      return;\n    }\n\n    const child = getNavChild(event, siblings, elIndex);\n\n    if (child) {\n      const inMonth = child.getAttribute(\"data-in-month\");\n      if (inMonth === \"true\") {\n        event?.preventDefault();\n        child?.focus();\n      }\n    }\n  };\n\n  const renderWeekLabel = (dayName: string, index: number) => (\n    <HvTypography key={index} variant=\"label\" className={classes.calendarDay}>\n      {dayName}\n    </HvTypography>\n  );\n\n  /** Renders the element representing the received date. */\n  const renderCalendarDate = (currentDate: Date) => {\n    return (\n      <HvCalendarCell\n        classes={classes}\n        key={currentDate.toString()}\n        tabIndex={currentDate.getTime() === firstDayOfCurrentMonthTime ? 0 : -1}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        value={currentDate}\n        today={today}\n        calendarValue={localValue}\n        rangeMode={rangeMode}\n        isDateSelectionMode={isDateSelectionMode}\n        locale={locale}\n        firstDayOfCurrentMonth={firstDayOfCurrentMonth}\n        maximumDate={maximumDate}\n        minimumDate={minimumDate}\n      />\n    );\n  };\n\n  return (\n    <div className={cx(classes.calendarContainer, className)} {...others}>\n      <div id={id} className={classes.calendarWrapper}>\n        <HvCalendarHeader\n          id={setId(id, \"header\")}\n          locale={locale}\n          onChange={handleInputChange}\n          showEndDate={showEndDate && !isDateSelectionMode}\n          showDayOfWeek={showDayOfWeek}\n          invalidDateLabel={invalidDateLabel}\n        />\n        {calViewMode === \"calendar\" && (\n          <div>\n            <HvComposedNavigation\n              id={id}\n              locale={locale}\n              onChange={onVisibleDateChange}\n              onViewModeChange={setCalViewMode}\n              visibleYear={visibleYear || today.getFullYear()}\n              visibleMonth={visibleMonth || today.getMonth() + 1}\n            />\n            <div\n              className={classes.calendarGrid}\n              // @ts-ignore TODO: review\n              aria-controls={HvCalendarHeader?.[0]?.id}\n            >\n              {listWeekdayNames.map(renderWeekLabel)}\n              {calModel.dates.map(renderCalendarDate)}\n            </div>\n          </div>\n        )}\n        {calViewMode === \"monthly\" && (\n          <HvMonthSelector\n            id={id}\n            locale={locale}\n            onChange={onVisibleDateChange}\n            onViewModeChange={setCalViewMode}\n            visibleMonth={visibleMonth || today.getMonth() + 1}\n            rangeMode={rangeMode}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport interface HvSingleCalendarProps {\n  /**\n   * Styles applied from the theme.\n   */\n  classes?: HvSingleCalendarClasses;\n  /**\n   * Identifier.\n   */\n  id?: string;\n  /**\n   * The class name to add at the root of the single calendar\n   */\n  className?: string;\n  /**\n   * The calendar locale.\n   *\n   */\n  locale: string;\n  /**\n   * Date that the calendar would show.\n   */\n  value?: string | Date | DateRangeProp;\n  /**\n   * Date that will be used to know which month and year should be displayed on the calendar. The value of the day is\n   * irrelevant.\n   */\n  visibleDate?: Date;\n  /**\n   * Controls the visible month of the Calendar\n   */\n  visibleMonth?: number;\n  /**\n   * Controls the visible month of the Calendar\n   */\n  visibleYear?: number;\n  /**\n   * Callback function to be triggered when the selected date has changed.\n   */\n  onChange?: (\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n      | undefined,\n    value: Date | DateRangeProp\n  ) => void;\n  /**\n   * Callback function to be triggered when the selected date input has changed.\n   */\n  onInputChange?: (\n    event:\n      | React.ChangeEvent<\n          HTMLTextAreaElement | HTMLInputElement | HTMLButtonElement\n        >\n      | undefined,\n    value: Date | DateRangeProp,\n    position?: \"left\" | \"right\"\n  ) => void;\n  /**\n   * Callback function to be triggered when visible date has changed.\n   */\n  onVisibleDateChange?: (\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n      | undefined,\n    action: VisibilitySelectorActions,\n    value?: Date | DateRangeProp | number\n  ) => void;\n  /**\n   * The maximum selectable date after this all values are disabled.\n   */\n  maximumDate?: Date;\n  /**\n   * The minimum selectable date before this all values are disabled.\n   */\n  minimumDate?: Date;\n  /**\n   * Indicates if header should display end date in a date range.\n   */\n  showEndDate?: boolean;\n  /**\n   * Indicates if header should display the day of week.\n   */\n  showDayOfWeek?: boolean;\n  /**\n   * Content on the upper part of the calendar.\n   */\n  children?: React.ReactNode;\n  /**\n   * Label shown when date is invalid.\n   */\n  invalidDateLabel?: string;\n}\n"],"names":[],"mappings":"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"}