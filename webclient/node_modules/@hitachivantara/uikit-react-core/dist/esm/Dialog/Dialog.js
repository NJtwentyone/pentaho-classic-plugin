import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useCallback, useMemo } from "react";
import MuiDialog from "@mui/material/Dialog";
import { Close } from "@hitachivantara/uikit-react-icons";
import { useDefaultProps } from "../hooks/useDefaultProps.js";
import { getElementById } from "../utils/document.js";
import { setId } from "../utils/setId.js";
import { useTheme } from "../hooks/useTheme.js";
import { useClasses } from "./Dialog.styles.js";
import { staticClasses } from "./Dialog.styles.js";
import { DialogContext } from "./context.js";
import { HvButton } from "../Button/Button.js";
import { HvTooltip } from "../Tooltip/Tooltip.js";
const HvDialog = (props) => {
  const {
    variant,
    classes: classesProp,
    className,
    id,
    children,
    open = false,
    onClose,
    firstFocusable,
    buttonTitle = "Close",
    fullscreen = false,
    disableBackdropClick = false,
    ...others
  } = useDefaultProps("HvDialog", props);
  const { classes, css, cx } = useClasses(classesProp);
  const { rootId } = useTheme();
  const measuredRef = useCallback(() => {
    if (!firstFocusable)
      return;
    const element = document.getElementById(firstFocusable);
    element?.focus();
  }, [firstFocusable]);
  const contextValue = useMemo(() => ({ fullscreen }), [fullscreen]);
  return /* @__PURE__ */ jsxs(
    MuiDialog,
    {
      container: getElementById(rootId),
      className: cx(classes.root, className),
      classes: { container: css({ position: "relative" }) },
      id,
      ref: measuredRef,
      open,
      fullScreen: fullscreen,
      onClose: (event, reason) => {
        if (disableBackdropClick)
          return;
        onClose?.(event, reason);
      },
      slotProps: {
        backdrop: {
          classes: {
            root: classes.background
          }
        }
      },
      PaperProps: {
        classes: {
          root: cx(
            css({ position: "absolute" }),
            classes.paper,
            variant && cx(classes.statusBar, classes[variant]),
            {
              [classes.fullscreen]: fullscreen
            }
          )
        }
      },
      "aria-modal": true,
      ...others,
      children: [
        /* @__PURE__ */ jsx(HvTooltip, { placement: "top", title: buttonTitle, children: /* @__PURE__ */ jsx(
          HvButton,
          {
            id: setId(id, "close"),
            className: classes.closeButton,
            variant: "secondaryGhost",
            onClick: (event) => onClose?.(event, void 0),
            children: /* @__PURE__ */ jsx(Close, { role: "none" })
          }
        ) }),
        /* @__PURE__ */ jsx(DialogContext.Provider, { value: contextValue, children })
      ]
    }
  );
};
export {
  HvDialog,
  staticClasses as dialogClasses
};
