{"version":3,"file":"QueryBuilder.js","sources":["../../../src/QueryBuilder/QueryBuilder.tsx"],"sourcesContent":["import { useEffect, useMemo, useReducer, useRef, useState } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { useDefaultProps } from \"../hooks/useDefaultProps\";\nimport { ExtractNames } from \"../utils/classes\";\n\nimport { ConfirmationDialog } from \"./ConfirmationDialog\";\nimport {\n  HvQueryBuilderProvider,\n  defaultCombinators,\n  defaultLabels,\n  defaultOperators,\n} from \"./Context\";\nimport { RuleGroup } from \"./RuleGroup\";\nimport {\n  AskAction,\n  HvQueryBuilderAttribute,\n  HvQueryBuilderQuery,\n  HvQueryBuilderLabels,\n  HvQueryBuilderQueryCombinator,\n  HvQueryBuilderQueryOperator,\n  HvQueryBuilderChangedQuery,\n  HvQueryBuilderRenderers,\n  defaultRendererKey,\n} from \"./types\";\nimport { clearNodeIds, emptyGroup } from \"./utils\";\nimport reducer from \"./utils/reducer\";\nimport { useClasses, staticClasses } from \"./QueryBuilder.styles\";\n\nexport { staticClasses as queryBuilderClasses };\n\nexport type HvQueryBuilderClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvQueryBuilderProps {\n  /** The query attribute types. */\n  attributes?: Record<string, HvQueryBuilderAttribute>;\n  /** The query rules operators by attribute type and combinator. */\n  operators?: Record<string, HvQueryBuilderQueryOperator[]>;\n  /** The query combinators operands. */\n  combinators?: HvQueryBuilderQueryCombinator[];\n  /** The initial query representation. */\n  query?: HvQueryBuilderQuery;\n  /** Callback fired when query changes. */\n  onChange?: (value: HvQueryBuilderChangedQuery) => void;\n  /** Max depth of nested query groups. */\n  maxDepth?: number;\n  /** Object containing all the labels. */\n  labels?: HvQueryBuilderLabels;\n  /** Whether the query builder is in read-only mode. */\n  readOnly?: boolean;\n  /**\n   * Operators that should use the empty value renderer when selected.\n   *\n   * When one of the listed operators is selected, the rule value is reset and an empty component is rendered.\n   * This property takes priority over `renderers`.\n   *\n   * @default [\"Empty\", \"IsNotEmpty\"]\n   * */\n  emptyRenderer?: string[];\n  /** Custom renderers for the rules' value. */\n  renderers?: HvQueryBuilderRenderers;\n  /** Whether to opt-out of the confirmation dialogs shown before removing rules and rule groups. @default false. */\n  disableConfirmation?: boolean;\n  /** A Jss Object used to override or extend the styles applied. */\n  classes?: HvQueryBuilderClasses;\n}\n\n// TODO - v6\n// - uncontrolled vs controlled: users should be able to control the state\n// - \"query\" renamed to \"initialQuery\" and \"query\" used to control the state\n// - \"query\" provided with ids by the user but removed through \"onChange\"\n// - \"range\", \"Empty\", and \"IsNotEmpty\" operators with internal/built-in logic\n\n/**\n * This component allows you to create conditions and group them using logical operators.\n * It outputs a structured set of rules which can be easily parsed to create SQL/NoSQL/whatever queries.\n *\n * Take a look at the [usage page](https://lumada-design.github.io/uikit/master/?path=/docs/widgets-query-builder-usage--docs) to learn more about this component.\n */\nexport const HvQueryBuilder = (props: HvQueryBuilderProps) => {\n  const {\n    attributes,\n    renderers,\n    query,\n    onChange,\n    disableConfirmation = false,\n    operators = defaultOperators,\n    combinators = defaultCombinators,\n    maxDepth = 1,\n    labels = defaultLabels,\n    readOnly = false,\n    emptyRenderer = [\"Empty\", \"IsNotEmpty\"],\n    classes: classesProp,\n  } = useDefaultProps(\"HvQueryBuilder\", props);\n\n  if (\n    import.meta.env.DEV &&\n    [\n      Object.values(attributes || {}).map(({ type }) => type),\n      Object.values(operators || {})\n        .map((ops) => ops.map(({ operator }) => operator))\n        .flat(),\n    ]\n      .flat()\n      ?.find((key) => key === defaultRendererKey)\n  ) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `${defaultRendererKey} is a restricted key and shouldn't be used as an attribute or operator type. Update the key to avoid unexpected behaviors.`\n    );\n  }\n\n  const { classes } = useClasses(classesProp);\n\n  const currentAttributes = useRef<HvQueryBuilderProps[\"attributes\"] | null>(\n    null\n  );\n\n  const initialQuery = useRef(query ?? emptyGroup());\n\n  const [pendingAction, setPendingAction] = useState<AskAction>();\n  const [prevState, setPrevState] = useState(initialQuery.current);\n  const [initialState, setInitialState] = useState(true);\n\n  const [state, dispatchAction] = useReducer(\n    reducer,\n    // Deep clone is needed to make sure that the \"query\" prop and \"initialQuery\" are not mutated\n    cloneDeep(initialQuery.current)\n  );\n\n  const value = useMemo(\n    () => ({\n      dispatchAction,\n      askAction: setPendingAction,\n      attributes,\n      operators,\n      combinators,\n      maxDepth,\n      labels,\n      initialTouched: initialState,\n      readOnly,\n      renderers,\n      disableConfirmation,\n      emptyRenderer,\n    }),\n    [\n      attributes,\n      operators,\n      combinators,\n      maxDepth,\n      labels,\n      readOnly,\n      initialState,\n      renderers,\n      disableConfirmation,\n      emptyRenderer,\n    ]\n  );\n\n  // Keep track of attributes\n  useEffect(() => {\n    if (currentAttributes.current == null) {\n      // First run, nothing to do\n      currentAttributes.current = attributes;\n    } else if (currentAttributes.current !== attributes) {\n      // Attributes changed. The existing query is almost certainly invalid, so reset it\n      currentAttributes.current = attributes;\n      dispatchAction({ type: \"reset-query\" });\n    }\n  }, [attributes]);\n\n  // Propagate the change if the query is modified\n  useEffect(() => {\n    if (!isEqual(state, prevState)) {\n      if (initialState) {\n        setInitialState(false);\n      }\n\n      onChange?.(clearNodeIds(state) as HvQueryBuilderChangedQuery);\n      setPrevState(cloneDeep(state));\n    }\n  }, [initialState, onChange, prevState, state]);\n\n  const handleConfirm = () => {\n    if (pendingAction) {\n      setPendingAction(undefined);\n      pendingAction.actions.forEach((action) => dispatchAction(action));\n    }\n  };\n\n  const handleCancel = () => {\n    setPendingAction(undefined);\n  };\n\n  return (\n    <HvQueryBuilderProvider value={value}>\n      <RuleGroup\n        level={0}\n        id={state.id}\n        combinator={state.combinator}\n        rules={state.rules}\n        classes={classes}\n      />\n      <ConfirmationDialog\n        isOpen={pendingAction != null}\n        onConfirm={handleConfirm}\n        onCancel={handleCancel}\n        title={pendingAction?.dialog.dialogTitle || \"\"}\n        message={pendingAction?.dialog.dialogMessage || \"\"}\n        confirmButtonLabel={pendingAction?.dialog.dialogConfirm || \"\"}\n        cancelButtonLabel={pendingAction?.dialog.dialogCancel || \"\"}\n        closeButtonTooltip={pendingAction?.dialog.dialogCloseTooltip || \"\"}\n      />\n    </HvQueryBuilderProvider>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAgFa,MAAA,iBAAiB,CAAC,UAA+B;AACtD,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,sBAAsB;AAAA,IACtB,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,WAAW;AAAA,IACX,SAAS;AAAA,IACT,WAAW;AAAA,IACX,gBAAgB,CAAC,SAAS,YAAY;AAAA,IACtC,SAAS;AAAA,EAAA,IACP,gBAAgB,kBAAkB,KAAK;AAmB3C,QAAM,EAAE,QAAA,IAAY,WAAW,WAAW;AAE1C,QAAM,oBAAoB;AAAA,IACxB;AAAA,EAAA;AAGF,QAAM,eAAe,OAAO,SAAS,WAAY,CAAA;AAEjD,QAAM,CAAC,eAAe,gBAAgB,IAAI,SAAoB;AAC9D,QAAM,CAAC,WAAW,YAAY,IAAI,SAAS,aAAa,OAAO;AAC/D,QAAM,CAAC,cAAc,eAAe,IAAI,SAAS,IAAI;AAE/C,QAAA,CAAC,OAAO,cAAc,IAAI;AAAA,IAC9B;AAAA;AAAA,IAEA,UAAU,aAAa,OAAO;AAAA,EAAA;AAGhC,QAAM,QAAQ;AAAA,IACZ,OAAO;AAAA,MACL;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,gBAAgB;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,IAEF;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAIF,YAAU,MAAM;AACV,QAAA,kBAAkB,WAAW,MAAM;AAErC,wBAAkB,UAAU;AAAA,IAAA,WACnB,kBAAkB,YAAY,YAAY;AAEnD,wBAAkB,UAAU;AACb,qBAAA,EAAE,MAAM,cAAA,CAAe;AAAA,IACxC;AAAA,EAAA,GACC,CAAC,UAAU,CAAC;AAGf,YAAU,MAAM;AACd,QAAI,CAAC,QAAQ,OAAO,SAAS,GAAG;AAC9B,UAAI,cAAc;AAChB,wBAAgB,KAAK;AAAA,MACvB;AAEW,iBAAA,aAAa,KAAK,CAA+B;AAC/C,mBAAA,UAAU,KAAK,CAAC;AAAA,IAC/B;AAAA,KACC,CAAC,cAAc,UAAU,WAAW,KAAK,CAAC;AAE7C,QAAM,gBAAgB,MAAM;AAC1B,QAAI,eAAe;AACjB,uBAAiB,MAAS;AAC1B,oBAAc,QAAQ,QAAQ,CAAC,WAAW,eAAe,MAAM,CAAC;AAAA,IAClE;AAAA,EAAA;AAGF,QAAM,eAAe,MAAM;AACzB,qBAAiB,MAAS;AAAA,EAAA;AAI1B,SAAC,qBAAA,0BAAuB,OACtB,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,OAAO;AAAA,QACP,IAAI,MAAM;AAAA,QACV,YAAY,MAAM;AAAA,QAClB,OAAO,MAAM;AAAA,QACb;AAAA,MAAA;AAAA,IACF;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,QAAQ,iBAAiB;AAAA,QACzB,WAAW;AAAA,QACX,UAAU;AAAA,QACV,OAAO,eAAe,OAAO,eAAe;AAAA,QAC5C,SAAS,eAAe,OAAO,iBAAiB;AAAA,QAChD,oBAAoB,eAAe,OAAO,iBAAiB;AAAA,QAC3D,mBAAmB,eAAe,OAAO,gBAAgB;AAAA,QACzD,oBAAoB,eAAe,OAAO,sBAAsB;AAAA,MAAA;AAAA,IAClE;AAAA,KACF;AAEJ;"}