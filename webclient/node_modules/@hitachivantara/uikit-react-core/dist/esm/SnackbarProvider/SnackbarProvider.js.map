{"version":3,"file":"SnackbarProvider.js","sources":["../../../src/SnackbarProvider/SnackbarProvider.tsx"],"sourcesContent":["import { forwardRef, ReactNode, useCallback, useMemo } from \"react\";\nimport {\n  OptionsObject,\n  SnackbarContent,\n  SnackbarProvider,\n  SnackbarProviderProps,\n  useSnackbar,\n} from \"notistack\";\nimport { SnackbarOrigin } from \"@mui/material/Snackbar\";\n\nimport { ExtractNames } from \"../utils/classes\";\nimport {\n  HvSnackbarContent,\n  HvSnackbarContentProps,\n} from \"../Snackbar/SnackbarContent\";\nimport { HvSnackbarVariant } from \"../Snackbar/types\";\nimport { staticClasses, useClasses } from \"./SnackbarProvider.styles\";\n\nexport { staticClasses as snackbarProviderClasses };\n\nexport type HvSnackbarProviderClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSnackbarProviderProps {\n  /** Your component tree. */\n  children: React.ReactNode;\n  /** Max visible snackbars. */\n  maxSnack?: number;\n  /** How much time the snackbar remains visible in milliseconds. */\n  autoHideDuration?: number;\n  /** Where is the snackbar placed. */\n  anchorOrigin?: SnackbarOrigin;\n  /** Class object used to override notistack classes. */\n  notistackClassesOverride?: SnackbarProviderProps[\"classes\"];\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvSnackbarProviderClasses;\n  /** Class names to be applied. */\n  className?: string;\n  /** The container the snackbar should slide from. */\n  container?: SnackbarProviderProps[\"domRoot\"];\n}\n\nexport interface HvNotistackSnackMessageProps extends OptionsObject {\n  /** Id to be applied to the root node. */\n  id?: string;\n  /** class name to apply on the root node */\n  className?: string;\n  /** Your component tree. */\n  message?: ReactNode;\n  /** Variant of the snackbar. */\n  variant?: HvSnackbarVariant;\n  /** Extra values to pass to the snackbar. */\n  snackbarContentProps?: HvSnackbarContentProps;\n}\n\nconst HvNotistackSnackMessage = forwardRef<\n  HTMLDivElement,\n  HvNotistackSnackMessageProps\n>((props, ref) => {\n  const { id, message, variant = \"success\", snackbarContentProps } = props;\n\n  return (\n    <SnackbarContent ref={ref}>\n      <HvSnackbarContent\n        id={id}\n        variant={variant}\n        showIcon\n        label={message}\n        role=\"none\"\n        {...snackbarContentProps}\n      />\n    </SnackbarContent>\n  );\n});\n\n// We override notistack hook to be able to customize the snackbar that should be called.\nexport const useHvSnackbar = () => {\n  const snackbarContext = useSnackbar();\n\n  if (!snackbarContext) {\n    throw new Error(\"useHvSnackbar must be used within an HvSnackbarProvider\");\n  }\n\n  const { enqueueSnackbar: enqueueNotistackSnackbar, closeSnackbar } =\n    snackbarContext;\n\n  const enqueueSnackbar = useCallback(\n    (message: ReactNode, options: HvNotistackSnackMessageProps = {}) => {\n      const {\n        id,\n        variant = \"success\",\n        snackbarContentProps,\n        className,\n        ...otherOptions\n      } = options;\n\n      return enqueueNotistackSnackbar(\n        <HvNotistackSnackMessage\n          id={id}\n          message={message}\n          variant={variant}\n          snackbarContentProps={snackbarContentProps}\n        />,\n        { ...otherOptions, className }\n      );\n    },\n    [enqueueNotistackSnackbar]\n  );\n  return useMemo(\n    () => ({\n      enqueueSnackbar,\n      closeSnackbar,\n    }),\n    [enqueueSnackbar, closeSnackbar]\n  );\n};\n\nexport const HvSnackbarProvider = ({\n  children,\n  notistackClassesOverride,\n  maxSnack = 5,\n  autoHideDuration = 5000,\n  anchorOrigin = {\n    vertical: \"top\",\n    horizontal: \"right\",\n  },\n  classes: classesProp,\n  className,\n  container,\n  ...others\n}: HvSnackbarProviderProps) => {\n  const { classes, css, cx } = useClasses(classesProp);\n\n  const { containerRoot, ...otherNotistackClasses } =\n    notistackClassesOverride || {};\n\n  const notistackClasses: SnackbarProviderProps[\"classes\"] = {\n    containerRoot: cx(\n      css({\n        pointerEvents: \"all\",\n        \"& > div > div\": {\n          // Overrides notistack extra padding\n          padding: \"0 !important\",\n          transition: \"all 0s ease 0s !important\",\n        },\n      }),\n      containerRoot\n    ),\n    ...otherNotistackClasses,\n  };\n\n  return (\n    <SnackbarProvider\n      classes={notistackClasses}\n      maxSnack={maxSnack}\n      autoHideDuration={autoHideDuration}\n      anchorOrigin={anchorOrigin}\n      className={cx(classes.snackItemRoot, className)}\n      domRoot={container}\n      {...others}\n    >\n      {children}\n    </SnackbarProvider>\n  );\n};\n"],"names":[],"mappings":";;;;;;AAsDA,MAAM,0BAA0B,WAG9B,CAAC,OAAO,QAAQ;AAChB,QAAM,EAAE,IAAI,SAAS,UAAU,WAAW,qBAAyB,IAAA;AAGjE,SAAA,oBAAC,mBAAgB,KACf,UAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,UAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAK;AAAA,MACJ,GAAG;AAAA,IAAA;AAAA,EAER,EAAA,CAAA;AAEJ,CAAC;AAGM,MAAM,gBAAgB,MAAM;AACjC,QAAM,kBAAkB;AAExB,MAAI,CAAC,iBAAiB;AACd,UAAA,IAAI,MAAM,yDAAyD;AAAA,EAC3E;AAEA,QAAM,EAAE,iBAAiB,0BAA0B,cAAA,IACjD;AAEF,QAAM,kBAAkB;AAAA,IACtB,CAAC,SAAoB,UAAwC,OAAO;AAC5D,YAAA;AAAA,QACJ;AAAA,QACA,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MACD,IAAA;AAEG,aAAA;AAAA,QACL;AAAA,UAAC;AAAA,UAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UAAA;AAAA,QACF;AAAA,QACA,EAAE,GAAG,cAAc,UAAU;AAAA,MAAA;AAAA,IAEjC;AAAA,IACA,CAAC,wBAAwB;AAAA,EAAA;AAEpB,SAAA;AAAA,IACL,OAAO;AAAA,MACL;AAAA,MACA;AAAA,IAAA;AAAA,IAEF,CAAC,iBAAiB,aAAa;AAAA,EAAA;AAEnC;AAEO,MAAM,qBAAqB,CAAC;AAAA,EACjC;AAAA,EACA;AAAA,EACA,WAAW;AAAA,EACX,mBAAmB;AAAA,EACnB,eAAe;AAAA,IACb,UAAU;AAAA,IACV,YAAY;AAAA,EACd;AAAA,EACA,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAA+B;AAC7B,QAAM,EAAE,SAAS,KAAK,GAAG,IAAI,WAAW,WAAW;AAEnD,QAAM,EAAE,eAAe,GAAG,sBAAsB,IAC9C,4BAA4B,CAAA;AAE9B,QAAM,mBAAqD;AAAA,IACzD,eAAe;AAAA,MACb,IAAI;AAAA,QACF,eAAe;AAAA,QACf,iBAAiB;AAAA;AAAA,UAEf,SAAS;AAAA,UACT,YAAY;AAAA,QACd;AAAA,MAAA,CACD;AAAA,MACD;AAAA,IACF;AAAA,IACA,GAAG;AAAA,EAAA;AAIH,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,GAAG,QAAQ,eAAe,SAAS;AAAA,MAC9C,SAAS;AAAA,MACR,GAAG;AAAA,MAEH;AAAA,IAAA;AAAA,EAAA;AAGP;"}