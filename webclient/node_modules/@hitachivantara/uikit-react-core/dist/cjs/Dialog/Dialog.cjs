"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const MuiDialog = require("@mui/material/Dialog");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useDefaultProps = require("../hooks/useDefaultProps.cjs");
const document$1 = require("../utils/document.cjs");
const setId = require("../utils/setId.cjs");
const useTheme = require("../hooks/useTheme.cjs");
const Dialog_styles = require("./Dialog.styles.cjs");
const context = require("./context.cjs");
const Button = require("../Button/Button.cjs");
const Tooltip = require("../Tooltip/Tooltip.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiDialog__default = /* @__PURE__ */ _interopDefault(MuiDialog);
const HvDialog = (props) => {
  const {
    variant,
    classes: classesProp,
    className,
    id,
    children,
    open = false,
    onClose,
    firstFocusable,
    buttonTitle = "Close",
    fullscreen = false,
    disableBackdropClick = false,
    ...others
  } = useDefaultProps.useDefaultProps("HvDialog", props);
  const { classes, css, cx } = Dialog_styles.useClasses(classesProp);
  const { rootId } = useTheme.useTheme();
  const measuredRef = React.useCallback(() => {
    if (!firstFocusable)
      return;
    const element = document.getElementById(firstFocusable);
    element?.focus();
  }, [firstFocusable]);
  const contextValue = React.useMemo(() => ({ fullscreen }), [fullscreen]);
  return /* @__PURE__ */ jsxRuntime.jsxs(
    MuiDialog__default.default,
    {
      container: document$1.getElementById(rootId),
      className: cx(classes.root, className),
      classes: { container: css({ position: "relative" }) },
      id,
      ref: measuredRef,
      open,
      fullScreen: fullscreen,
      onClose: (event, reason) => {
        if (disableBackdropClick)
          return;
        onClose?.(event, reason);
      },
      slotProps: {
        backdrop: {
          classes: {
            root: classes.background
          }
        }
      },
      PaperProps: {
        classes: {
          root: cx(
            css({ position: "absolute" }),
            classes.paper,
            variant && cx(classes.statusBar, classes[variant]),
            {
              [classes.fullscreen]: fullscreen
            }
          )
        }
      },
      "aria-modal": true,
      ...others,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Tooltip.HvTooltip, { placement: "top", title: buttonTitle, children: /* @__PURE__ */ jsxRuntime.jsx(
          Button.HvButton,
          {
            id: setId.setId(id, "close"),
            className: classes.closeButton,
            variant: "secondaryGhost",
            onClick: (event) => onClose?.(event, void 0),
            children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Close, { role: "none" })
          }
        ) }),
        /* @__PURE__ */ jsxRuntime.jsx(context.DialogContext.Provider, { value: contextValue, children })
      ]
    }
  );
};
exports.dialogClasses = Dialog_styles.staticClasses;
exports.HvDialog = HvDialog;
