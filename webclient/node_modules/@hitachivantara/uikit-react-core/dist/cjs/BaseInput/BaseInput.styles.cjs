"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const uikitStyles = require("@hitachivantara/uikit-styles");
const focusUtils = require("../utils/focusUtils.cjs");
const classes = require("../utils/classes.cjs");
const { staticClasses, useClasses } = classes.createClasses("HvBaseInput", {
  root: {
    display: "inline-block",
    width: "100%",
    position: "relative",
    "&:hover $inputBorderContainer": {
      backgroundColor: uikitStyles.theme.colors.primary
    },
    "&:focus-within $inputBorderContainer": {
      backgroundColor: uikitStyles.theme.colors.primary
    }
  },
  disabled: {
    "& $inputRoot": {
      backgroundColor: uikitStyles.theme.colors.atmo2,
      borderColor: uikitStyles.theme.colors.secondary_60
    },
    "& $inputBorderContainer": {
      backgroundColor: uikitStyles.theme.colors.atmo4
    },
    "&:hover $inputBorderContainer": {
      backgroundColor: uikitStyles.theme.colors.atmo4
    },
    "&& $input": {
      color: uikitStyles.theme.colors.secondary_60,
      WebkitTextFillColor: uikitStyles.theme.colors.secondary_60
    },
    "& $inputRootMultiline": {
      "& $input": {
        backgroundColor: uikitStyles.theme.colors.atmo2,
        border: `1px solid ${uikitStyles.theme.colors.secondary_60}`
      }
    },
    "&:hover $inputRootMultiline": {
      "& $input": {
        backgroundColor: uikitStyles.theme.colors.atmo2,
        border: `1px solid ${uikitStyles.theme.colors.secondary_60}`
      }
    }
  },
  invalid: {
    "&:not(.disabled)": {
      "& $inputBorderContainer": {
        backgroundColor: uikitStyles.theme.colors.negative
      },
      "&:hover $inputBorderContainer": {
        backgroundColor: uikitStyles.theme.colors.negative
      },
      "& $inputRootMultiline": {
        "& $input": {
          border: `1px solid ${uikitStyles.theme.colors.negative}`
        }
      },
      "&:hover $inputRootMultiline": {
        "& $input": {
          border: `1px solid ${uikitStyles.theme.colors.negative}`
        }
      },
      "&:focus-within $inputRootMultiline": {
        "& $input": {
          border: `1px solid ${uikitStyles.theme.colors.negative}`
        }
      }
    }
  },
  resizable: { width: "auto" },
  readOnly: {
    "& $inputBorderContainer": {
      backgroundColor: "transparent"
    },
    "&:hover $inputBorderContainer": {
      backgroundColor: "transparent"
    },
    "&:focus-within $inputBorderContainer": {
      backgroundColor: "transparent"
    },
    "& $inputRootMultiline": {
      "& $input": {
        border: `1px solid ${uikitStyles.theme.colors.secondary_60}`,
        backgroundColor: uikitStyles.theme.colors.atmo2
      }
    },
    "&:hover $inputRootMultiline": {
      "& $input": {
        border: `1px solid ${uikitStyles.theme.colors.secondary_60}`,
        backgroundColor: uikitStyles.theme.colors.atmo2
      }
    },
    "&:focus-within $inputRootMultiline": {
      "& $input": {
        border: `1px solid ${uikitStyles.theme.colors.secondary_60}`,
        backgroundColor: uikitStyles.theme.colors.atmo2
      }
    }
  },
  inputBorderContainer: {
    position: "absolute",
    width: "calc(100% - 4px)",
    height: "0px",
    top: "31px",
    left: "2px",
    backgroundColor: uikitStyles.theme.colors.atmo4
  },
  inputRootInvalid: { borderColor: uikitStyles.theme.colors.negative },
  inputRootReadOnly: {
    borderColor: uikitStyles.theme.colors.secondary_60,
    backgroundColor: uikitStyles.theme.colors.atmo2
  },
  inputRoot: {
    margin: 0,
    width: "100%",
    borderRadius: uikitStyles.theme.radii.base,
    height: "32px",
    border: `1px solid ${uikitStyles.theme.colors.secondary}`,
    boxSizing: "border-box",
    backgroundColor: uikitStyles.theme.colors.atmo1,
    fontFamily: uikitStyles.theme.fontFamily.body,
    "&:hover:not($inputRootDisabled):not($inputRootInvalid):not($inputRootReadOnly)": {
      borderColor: uikitStyles.theme.colors.primary
    },
    "&:hover:not($inputRootDisabled)::before": {
      borderBottom: "none"
    },
    "&::before": {
      borderBottom: "none"
    },
    "&::after": {
      borderBottom: "none"
    }
  },
  inputRootFocused: {
    backgroundColor: uikitStyles.theme.colors.atmo1,
    ...focusUtils.outlineStyles,
    "&:hover": {
      backgroundColor: uikitStyles.theme.colors.atmo1
    },
    "&$inputRootReadOnly": {
      backgroundColor: uikitStyles.theme.colors.atmo2
    }
  },
  inputRootDisabled: {
    cursor: "not-allowed",
    "&&::before": {
      borderBottomStyle: "none"
    }
  },
  inputRootMultiline: {
    padding: 0,
    backgroundColor: "transparent",
    overflow: "auto",
    border: "none",
    height: "auto",
    "& $input": {
      border: `1px solid ${uikitStyles.theme.colors.secondary}`,
      borderRadius: uikitStyles.theme.radii.base,
      backgroundColor: uikitStyles.theme.colors.atmo1,
      height: "auto",
      minHeight: "21px",
      padding: "5px 10px",
      overflow: "auto",
      marginLeft: "0px",
      marginRight: "0px",
      "&:hover": {
        border: `1px solid ${uikitStyles.theme.colors.primary}`
      }
    }
  },
  input: {
    height: "19px",
    marginLeft: uikitStyles.theme.space.xs,
    marginRight: uikitStyles.theme.space.xs,
    padding: "6px 0 5px",
    overflow: "hidden",
    textOverflow: "ellipsis",
    outline: "none",
    width: "initial",
    flexGrow: 1,
    ...uikitStyles.theme.typography.body,
    "&::placeholder": {
      opacity: 1,
      color: uikitStyles.theme.colors.secondary_80
    },
    "&::-ms-clear": {
      display: "none"
    }
  },
  inputDisabled: {},
  inputReadOnly: {
    color: uikitStyles.theme.colors.secondary_80
  },
  inputResizable: { resize: "both", width: "100%" }
});
exports.staticClasses = staticClasses;
exports.useClasses = useClasses;
