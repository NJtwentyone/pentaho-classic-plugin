{"version":3,"file":"DateTimeValue.cjs","sources":["../../../../../../src/QueryBuilder/Rule/Value/DateTimeValue/DateTimeValue.tsx"],"sourcesContent":["import { memo, useCallback, useMemo, useState } from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport dayjs from \"dayjs\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\nimport { HvWarningText } from \"../../../../Forms\";\nimport { HvTimePicker, HvTimePickerValue } from \"../../../../TimePicker\";\nimport { HvDatePicker } from \"../../../../DatePicker\";\n\nimport { useQueryBuilderContext } from \"../../../Context\";\nimport { padTime, parseDate, parseTime } from \"./utils\";\nimport { useClasses } from \"./DateTimeValue.styles\";\n\nfunction valueIsRange(operator?: string) {\n  return operator === \"range\";\n}\n\nexport interface DateTimeValueProps {\n  id: React.Key;\n  operator?: string;\n  value?: any;\n  initialTouched?: boolean;\n}\n\nexport const DateTimeValue = ({\n  id,\n  operator,\n  value: valueProp = {},\n  initialTouched = false,\n}: DateTimeValueProps) => {\n  const { classes, cx } = useClasses();\n\n  const theme = useTheme();\n  const isMdDown = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const isRange = valueIsRange(operator);\n\n  const { labels, dispatchAction, readOnly } = useQueryBuilderContext();\n\n  const elementId = uniqueId(`datetime${id}`);\n\n  const [touchedDate, setTouchedDate] = useState(initialTouched);\n  const [touchedTime, setTouchedTime] = useState(initialTouched);\n  const [touchedEndDate, setTouchedEndDate] = useState(initialTouched);\n  const [touchedEndTime, setTouchedEndTime] = useState(initialTouched);\n\n  const onDateChange = useCallback(\n    (data?: Date) => {\n      setTouchedDate(true);\n\n      let date;\n      if (data != null) {\n        date = dayjs(data).format(\"YYYY-MM-DD\");\n      }\n\n      const oldValue = !isRange ? valueProp?.date : valueProp?.start?.date;\n\n      if (date !== oldValue) {\n        let value;\n        if (!isRange) {\n          value = {\n            date,\n            time: valueProp?.time,\n          };\n        } else {\n          value = {\n            start: {\n              date,\n              time: valueProp?.start?.time,\n            },\n            end: valueProp?.end,\n          };\n        }\n\n        dispatchAction({\n          type: \"set-value\",\n          id,\n          value,\n        });\n      }\n    },\n    [dispatchAction, id, isRange, valueProp]\n  );\n\n  const onTimeChange = useCallback(\n    (data: HvTimePickerValue) => {\n      setTouchedTime(true);\n\n      let time;\n      if (data != null) {\n        time = `${padTime(data.hours)}:${padTime(data.minutes)}:${padTime(\n          data.seconds\n        )}`;\n      }\n\n      const oldValue = !isRange ? valueProp?.time : valueProp?.start?.time;\n\n      if (time !== oldValue) {\n        let value;\n        if (!isRange) {\n          value = {\n            date: valueProp?.date,\n            time,\n          };\n        } else {\n          value = {\n            start: {\n              date: valueProp?.start?.date,\n              time,\n            },\n            end: valueProp?.end,\n          };\n        }\n\n        dispatchAction({\n          type: \"set-value\",\n          id,\n          value,\n        });\n      }\n    },\n    [dispatchAction, id, isRange, valueProp]\n  );\n\n  const onEndDateChange = useCallback(\n    (data?: Date) => {\n      setTouchedEndDate(true);\n\n      let date;\n      if (data != null) {\n        date = dayjs(data).format(\"YYYY-MM-DD\");\n      }\n\n      if (date !== valueProp?.end?.date) {\n        const value = {\n          start: valueProp?.start,\n          end: {\n            date,\n            time: valueProp?.end?.time,\n          },\n        };\n\n        dispatchAction({\n          type: \"set-value\",\n          id,\n          value,\n        });\n      }\n    },\n    [dispatchAction, id, valueProp]\n  );\n\n  const onEndTimeChange = useCallback(\n    (data: HvTimePickerValue) => {\n      setTouchedEndTime(true);\n\n      let time;\n      if (data != null) {\n        time = `${padTime(data.hours)}:${padTime(data.minutes)}:${padTime(\n          data.seconds\n        )}`;\n      }\n\n      if (time !== valueProp?.end?.time) {\n        const value = {\n          start: valueProp?.start,\n          end: {\n            date: valueProp?.end?.date,\n            time,\n          },\n        };\n\n        dispatchAction({\n          type: \"set-value\",\n          id,\n          value,\n        });\n      }\n    },\n    [dispatchAction, id, valueProp]\n  );\n\n  const startDate = isRange ? valueProp?.start?.date : valueProp?.date;\n  const datePickerValue = useMemo(() => parseDate(startDate), [startDate]);\n  const datePickerStatus = datePickerValue != null ? \"valid\" : \"invalid\";\n\n  const startTime = (isRange ? valueProp?.start?.time : valueProp?.time) ?? \"\";\n  const timePickerValue = useMemo(() => parseTime(startTime), [startTime]);\n  const timePickerStatus = timePickerValue != null ? \"valid\" : \"invalid\";\n\n  const endDate = isRange ? valueProp?.end?.date : null;\n  const endDatePickerValue = useMemo(() => parseDate(endDate), [endDate]);\n\n  const endTime = isRange ? valueProp?.end?.time : null;\n  const endTimePickerValue = useMemo(() => parseTime(endTime), [endTime]);\n\n  const dateStatus = !touchedDate ? \"standBy\" : datePickerStatus;\n  const timeStatus = !touchedTime ? \"standBy\" : timePickerStatus;\n\n  const endDateIsBefore =\n    startDate != null && endDate != null && endDate < startDate;\n\n  const endTimeIsBeforeOrSame =\n    startDate != null &&\n    endDate != null &&\n    endDate === startDate &&\n    startTime != null &&\n    endTime != null &&\n    endTime <= startTime;\n\n  const endDateTimeIsBefore = endDateIsBefore || endTimeIsBeforeOrSame;\n\n  const endDatePickerStatus =\n    endDatePickerValue == null || endDateTimeIsBefore ? \"invalid\" : \"valid\";\n  const endDateStatus = !touchedEndDate ? \"standBy\" : endDatePickerStatus;\n\n  const endTimePickerStatus =\n    endTimePickerValue == null || endDateTimeIsBefore ? \"invalid\" : \"valid\";\n  const endTimeStatus = !touchedEndTime ? \"standBy\" : endTimePickerStatus;\n\n  return (\n    <div className={classes.root}>\n      <div\n        className={cx(classes.row, classes.horizontal, {\n          [classes.isMdDown]: isMdDown,\n        })}\n      >\n        <HvDatePicker\n          className={classes.datePicker}\n          name={`${elementId}-date`}\n          required\n          status={dateStatus}\n          statusMessage={labels.rule.value.datetime.validation.required}\n          label={\n            isRange\n              ? labels.rule.value.datetime.startDateLabel\n              : labels.rule.value.datetime.dateLabel\n          }\n          placeholder={\n            isRange\n              ? labels.rule.value.datetime.startDatePlaceholder\n              : labels.rule.value.datetime.datePlaceholder\n          }\n          value={datePickerValue}\n          onChange={onDateChange}\n          readOnly={readOnly}\n        />\n        <HvTimePicker\n          className={classes.timePicker}\n          timeFormat=\"24\"\n          name={`${elementId}-time`}\n          required\n          status={timeStatus}\n          statusMessage={labels.rule.value.datetime.validation.required}\n          label={\n            isRange\n              ? labels.rule.value.datetime.startTimeLabel\n              : labels.rule.value.datetime.timeLabel\n          }\n          placeholder={\n            isRange\n              ? labels.rule.value.datetime.startTimePlaceholder\n              : labels.rule.value.datetime.timePlaceholder\n          }\n          value={timePickerValue || undefined}\n          onChange={onTimeChange}\n          onToggle={(_evt, open) => {\n            if (!open && !touchedTime) {\n              setTouchedTime(true);\n            }\n          }}\n          readOnly={readOnly}\n        />\n      </div>\n      {isRange && (\n        <div className={cx(classes.row, classes.vertical)}>\n          <div\n            className={cx(classes.horizontal, {\n              [classes.isMdDown]: isMdDown,\n            })}\n          >\n            <HvDatePicker\n              className={classes.datePicker}\n              name={`${elementId}-endDate`}\n              required\n              status={endDateStatus}\n              statusMessage={labels.rule.value.datetime.validation.required}\n              aria-errormessage={\n                endDateTimeIsBefore ? `${elementId}-combined-error` : undefined\n              }\n              label={labels.rule.value.datetime.endDateLabel}\n              placeholder={labels.rule.value.datetime.endDatePlaceholder}\n              value={endDatePickerValue}\n              onChange={onEndDateChange}\n              readOnly={readOnly}\n            />\n            <HvTimePicker\n              className={classes.timePicker}\n              timeFormat=\"24\"\n              name={`${elementId}-endTime`}\n              required\n              status={endTimeStatus}\n              statusMessage={labels.rule.value.datetime.validation.required}\n              aria-errormessage={\n                endDateTimeIsBefore ? `${elementId}-combined-error` : undefined\n              }\n              label={labels.rule.value.datetime.endTimeLabel}\n              placeholder={labels.rule.value.datetime.endTimePlaceholder}\n              value={endTimePickerValue || undefined}\n              onChange={onEndTimeChange}\n              onToggle={(_evt, open) => {\n                if (!open && !touchedEndTime) {\n                  setTouchedEndTime(true);\n                }\n              }}\n              readOnly={readOnly}\n            />\n          </div>\n          <HvWarningText\n            disableBorder\n            id={`${elementId}-combined-error`}\n            isVisible={endDateTimeIsBefore}\n          >\n            {labels.rule.value.datetime.validation.invalidInterval}\n          </HvWarningText>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(DateTimeValue);\n"],"names":["useClasses","useTheme","useMediaQuery","useQueryBuilderContext","uniqueId","useState","useCallback","dayjs","padTime","useMemo","parseDate","parseTime","jsxs","jsx","HvDatePicker","HvTimePicker","HvWarningText","memo"],"mappings":"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"}