{"version":3,"file":"Box.cjs","sources":["../../../src/Box/Box.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport { HvTheme, theme } from \"@hitachivantara/uikit-styles\";\n\nimport { PolymorphicComponentRef, PolymorphicRef } from \"../types/generic\";\nimport { useDefaultProps } from \"../hooks/useDefaultProps\";\n\ntype SxProps = React.CSSProperties | ((theme: HvTheme) => React.CSSProperties);\n\ntype HvBoxBaseProps<C extends React.ElementType> = PolymorphicComponentRef<\n  C,\n  { style?: React.CSSProperties; sx?: SxProps }\n>;\n\n// v6 - This shouldn't be named HvBoxProps\nexport type HvBoxProps = <C extends React.ElementType = \"div\">(\n  props: HvBoxBaseProps<C>\n) => React.ReactElement | null;\n\nconst sxFn = (sx: SxProps) => {\n  return typeof sx === \"function\" ? sx(theme) : sx;\n};\n\n/**\n * Customizable layout component that can be used to wrap other components.\n * It can be used to add styles to the wrapped components.\n * It can also be used to create a layout using the flexbox properties.\n */\nexport const HvBox: HvBoxProps = forwardRef(\n  <C extends React.ElementType = \"div\">(\n    props: HvBoxBaseProps<C>,\n    ref?: PolymorphicRef<C>\n  ) => {\n    const {\n      style,\n      component: Component = \"div\",\n      sx,\n      children,\n      classes,\n      ...restProps\n    } = useDefaultProps(\"HvBox\", props);\n\n    return (\n      <Component style={sx ? sxFn(sx) : style} ref={ref} {...restProps}>\n        {children}\n      </Component>\n    );\n  }\n);\n"],"names":["theme","forwardRef","useDefaultProps","jsx"],"mappings":";;;;;;AAkBA,MAAM,OAAO,CAAC,OAAgB;AAC5B,SAAO,OAAO,OAAO,aAAa,GAAGA,YAAK,KAAA,IAAI;AAChD;AAOO,MAAM,QAAoBC,MAAA;AAAA,EAC/B,CACE,OACA,QACG;AACG,UAAA;AAAA,MACJ;AAAA,MACA,WAAW,YAAY;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IAAA,IACDC,gBAAgB,gBAAA,SAAS,KAAK;AAGhC,WAAAC,2BAAA,IAAC,WAAU,EAAA,OAAO,KAAK,KAAK,EAAE,IAAI,OAAO,KAAW,GAAG,WACpD,SACH,CAAA;AAAA,EAEJ;AACF;;"}