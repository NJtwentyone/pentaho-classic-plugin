import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { forwardRef } from "react";
import { useLabels } from "../hooks/useLabels.js";
import { useUniqueId } from "../hooks/useUniqueId.js";
import { useControlled } from "../hooks/useControlled.js";
import { setId } from "../utils/setId.js";
import { useDefaultProps } from "../hooks/useDefaultProps.js";
import { useClasses } from "./FilterGroup.styles.js";
import { staticClasses } from "./FilterGroup.styles.js";
import { HvFilterGroupProvider } from "./FilterGroupContext.js";
import { HvFilterGroupContent } from "./FilterContent/FilterContent.js";
import { HvFormElement } from "../Forms/FormElement/FormElement.js";
import { HvLabel } from "../Forms/Label/Label.js";
import { HvInfoMessage } from "../Forms/InfoMessage/InfoMessage.js";
import { HvWarningText } from "../Forms/WarningText/WarningText.js";
const DEFAULT_LABELS = {
  /** Apply button label. */
  applyLabel: "Apply",
  /** Cancel button label. */
  cancelLabel: "Cancel",
  /** Clear button label. */
  clearLabel: "Clear Filters",
  /** Placeholder label. */
  placeholder: "Filters",
  /** SearchBox placeholder label. */
  searchBoxPlaceholder: "Search",
  /** Select All placeholder label. */
  selectAll: "All",
  /** Multi selection conjunction placeholder label. */
  multiSelectionConjunction: "/"
};
const HvFilterGroup = forwardRef(
  (props, ref) => {
    const {
      className,
      id,
      name,
      required = false,
      disabled = false,
      label,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      description,
      "aria-describedby": ariaDescribedBy,
      onChange,
      onCancel,
      onClear,
      status,
      statusMessage,
      labels: labelsProp,
      defaultValue,
      value,
      filters,
      horizontalPlacement = "right",
      disablePortal = true,
      escapeWithReference = true,
      height = 350,
      filterContentProps,
      classes: classesProp,
      ...others
    } = useDefaultProps("HvFilterGroup", props);
    const { classes, cx } = useClasses(classesProp);
    const [validationMessage] = useControlled(statusMessage, "Required");
    const elementId = useUniqueId(id, "hvfiltergroup");
    const labels = useLabels(DEFAULT_LABELS, labelsProp);
    const hasLabel = label != null;
    const hasDescription = description != null;
    const canShowError = status !== void 0 || required;
    return /* @__PURE__ */ jsxs(
      HvFormElement,
      {
        id,
        name,
        value,
        status,
        disabled,
        required,
        className: cx(classes.root, className),
        ...others,
        children: [
          (hasLabel || hasDescription) && /* @__PURE__ */ jsxs("div", { className: classes.labelContainer, children: [
            hasLabel && /* @__PURE__ */ jsx(
              HvLabel,
              {
                id: setId(elementId, "label"),
                htmlFor: setId(elementId, "input"),
                label,
                className: classes.label
              }
            ),
            hasDescription && /* @__PURE__ */ jsx(
              HvInfoMessage,
              {
                id: setId(elementId, "description"),
                className: classes.description,
                children: description
              }
            )
          ] }),
          /* @__PURE__ */ jsxs(
            HvFilterGroupProvider,
            {
              defaultValue,
              value,
              filters,
              children: [
                /* @__PURE__ */ jsx(
                  HvFilterGroupContent,
                  {
                    ref,
                    id: elementId,
                    disabled,
                    disablePortal,
                    variableWidth: true,
                    placement: horizontalPlacement,
                    escapeWithReference,
                    "aria-label": ariaLabel,
                    "aria-labelledby": ariaLabelledBy,
                    status,
                    onChange,
                    onCancel,
                    onClear,
                    labels,
                    height,
                    ...filterContentProps
                  }
                ),
                canShowError && /* @__PURE__ */ jsx(
                  HvWarningText,
                  {
                    id: setId(elementId, "error"),
                    disableBorder: true,
                    className: classes.error,
                    children: validationMessage
                  }
                )
              ]
            }
          )
        ]
      }
    );
  }
);
export {
  HvFilterGroup,
  staticClasses as filterGroupClasses
};
