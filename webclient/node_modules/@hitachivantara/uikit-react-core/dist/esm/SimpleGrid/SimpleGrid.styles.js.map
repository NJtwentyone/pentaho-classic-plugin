{"version":3,"file":"SimpleGrid.styles.js","sources":["../../../src/SimpleGrid/SimpleGrid.styles.tsx"],"sourcesContent":["import { CSSObject } from \"@emotion/serialize\";\n\nimport { theme } from \"@hitachivantara/uikit-styles\";\n\nimport { createClasses } from \"../utils/classes\";\n\nimport { Spacing, Breakpoint } from \"./types\";\n\nexport const { staticClasses, useClasses } = createClasses(\"HvSimpleGrid\", {\n  root: {},\n});\n\nfunction size(props: { size: any; sizes: any }) {\n  if (typeof props.size === \"number\") {\n    return props.size;\n  }\n\n  return props.sizes[props.size] || props.size || props.sizes.md;\n}\n\nfunction getSortedBreakpoints(breakpoints: Breakpoint[]) {\n  if (breakpoints.length === 0) {\n    return breakpoints;\n  }\n\n  const property = \"maxWidth\" in breakpoints[0] ? \"maxWidth\" : \"minWidth\";\n  const sorted = [...breakpoints].sort(\n    (a, b) =>\n      size({ size: b[property], sizes: theme.breakpoints }) -\n      size({ size: a[property], sizes: theme.breakpoints })\n  );\n\n  return property === \"minWidth\" ? sorted.reverse() : sorted;\n}\n\nexport const getContainerStyle = ({\n  breakpoints,\n  spacing,\n  cols,\n}: {\n  breakpoints?: Breakpoint[];\n  spacing: Spacing;\n  cols?: number;\n}): CSSObject => {\n  return {\n    boxSizing: \"border-box\",\n    display: \"grid\",\n    gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,\n    gap: theme.space[spacing],\n    ...(breakpoints &&\n      getSortedBreakpoints(breakpoints).reduce((acc, breakpoint) => {\n        const property = \"maxWidth\" in breakpoint ? \"max-width\" : \"min-width\";\n        const breakpointSize = size({\n          size:\n            property === \"max-width\"\n              ? breakpoint.maxWidth\n              : breakpoint.minWidth,\n          sizes: theme.breakpoints,\n        });\n\n        acc[\n          `@media (${property}: ${\n            breakpointSize + (property === \"max-width\" ? 0 : 1)\n          }px)`\n        ] = {\n          gridTemplateColumns: `repeat(${breakpoint.cols}, minmax(0, 1fr))`,\n          gap: theme.space[spacing],\n        };\n\n        return acc;\n      }, {})),\n  };\n};\n"],"names":[],"mappings":";;AAQO,MAAM,EAAE,eAAe,eAAe,cAAc,gBAAgB;AAAA,EACzE,MAAM,CAAC;AACT,CAAC;AAED,SAAS,KAAK,OAAkC;AAC1C,MAAA,OAAO,MAAM,SAAS,UAAU;AAClC,WAAO,MAAM;AAAA,EACf;AAEO,SAAA,MAAM,MAAM,MAAM,IAAI,KAAK,MAAM,QAAQ,MAAM,MAAM;AAC9D;AAEA,SAAS,qBAAqB,aAA2B;AACnD,MAAA,YAAY,WAAW,GAAG;AACrB,WAAA;AAAA,EACT;AAEA,QAAM,WAAW,cAAc,YAAY,CAAC,IAAI,aAAa;AAC7D,QAAM,SAAS,CAAC,GAAG,WAAW,EAAE;AAAA,IAC9B,CAAC,GAAG,MACF,KAAK,EAAE,MAAM,EAAE,QAAQ,GAAG,OAAO,MAAM,aAAa,IACpD,KAAK,EAAE,MAAM,EAAE,QAAQ,GAAG,OAAO,MAAM,aAAa;AAAA,EAAA;AAGxD,SAAO,aAAa,aAAa,OAAO,QAAA,IAAY;AACtD;AAEO,MAAM,oBAAoB,CAAC;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AACF,MAIiB;AACR,SAAA;AAAA,IACL,WAAW;AAAA,IACX,SAAS;AAAA,IACT,qBAAqB,UAAU,IAAI;AAAA,IACnC,KAAK,MAAM,MAAM,OAAO;AAAA,IACxB,GAAI,eACF,qBAAqB,WAAW,EAAE,OAAO,CAAC,KAAK,eAAe;AACtD,YAAA,WAAW,cAAc,aAAa,cAAc;AAC1D,YAAM,iBAAiB,KAAK;AAAA,QAC1B,MACE,aAAa,cACT,WAAW,WACX,WAAW;AAAA,QACjB,OAAO,MAAM;AAAA,MAAA,CACd;AAGC,UAAA,WAAW,QAAQ,KACjB,kBAAkB,aAAa,cAAc,IAAI,EACnD,KACF,IAAI;AAAA,QACF,qBAAqB,UAAU,WAAW,IAAI;AAAA,QAC9C,KAAK,MAAM,MAAM,OAAO;AAAA,MAAA;AAGnB,aAAA;AAAA,IACT,GAAG,EAAE;AAAA,EAAA;AAEX;"}