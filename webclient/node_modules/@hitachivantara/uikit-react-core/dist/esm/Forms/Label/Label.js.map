{"version":3,"file":"Label.js","sources":["../../../../src/Forms/Label/Label.tsx"],"sourcesContent":["import { useContext } from \"react\";\n\nimport { useDefaultProps } from \"../../hooks/useDefaultProps\";\nimport { setId } from \"../../utils/setId\";\nimport { ExtractNames } from \"../../utils/classes\";\nimport { HvTypography, HvTypographyProps } from \"../../Typography\";\n\nimport { HvFormElementContext } from \"../FormElement\";\nimport { findDescriptors } from \"../FormElement/utils/FormUtils\";\nimport { staticClasses, useClasses } from \"./Label.styles\";\n\nexport { staticClasses as labelClasses };\n\nexport type HvLabelClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvLabelProps extends HvTypographyProps<\"label\"> {\n  /** Id to be applied to the root node */\n  id?: string;\n  /** The text to be shown by the label. */\n  label?: React.ReactNode;\n  /** The id of the form element the label is bound to. */\n  htmlFor?: string;\n  /** If `true` the label is displayed with a disabled style. */\n  disabled?: boolean;\n  /** If `true`, the label will indicate that the form element is required (an `*` after the label text). */\n  required?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvLabelClasses;\n}\n\n/**\n * Provides the user with a recognizable name for a given form element.\n */\nexport const HvLabel = (props: HvLabelProps) => {\n  const {\n    id,\n    classes: classesProp,\n    className,\n    children,\n    label,\n    disabled,\n    required,\n    htmlFor: htmlForProp,\n    ...others\n  } = useDefaultProps(\"HvLabel\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const { elementId, elementDisabled, elementRequired } =\n    useContext(HvFormElementContext);\n\n  const localDisabled = disabled || elementDisabled;\n  const localRequired = required || elementRequired;\n\n  const localId = id ?? setId(elementId, \"label\");\n\n  const forId = htmlForProp || findDescriptors(children)?.input?.[0]?.id;\n\n  return (\n    <>\n      <HvTypography\n        id={localId}\n        className={cx(\n          classes.root,\n          {\n            [classes.labelDisabled]: !!localDisabled,\n            [classes.childGutter]: !!(children && label),\n          },\n          className\n        )}\n        variant=\"label\"\n        component=\"label\"\n        htmlFor={forId}\n        {...others}\n      >\n        {label}\n        {localRequired && <span aria-hidden=\"true\">*</span>}\n      </HvTypography>\n      {children}\n    </>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;AAiCa,MAAA,UAAU,CAAC,UAAwB;AACxC,QAAA;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,GAAG;AAAA,EAAA,IACD,gBAAgB,WAAW,KAAK;AAEpC,QAAM,EAAE,SAAS,GAAG,IAAI,WAAW,WAAW;AAE9C,QAAM,EAAE,WAAW,iBAAiB,gBAAgB,IAClD,WAAW,oBAAoB;AAEjC,QAAM,gBAAgB,YAAY;AAClC,QAAM,gBAAgB,YAAY;AAElC,QAAM,UAAU,MAAM,MAAM,WAAW,OAAO;AAE9C,QAAM,QAAQ,eAAe,gBAAgB,QAAQ,GAAG,QAAQ,CAAC,GAAG;AAEpE,SAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,IAAI;AAAA,QACJ,WAAW;AAAA,UACT,QAAQ;AAAA,UACR;AAAA,YACE,CAAC,QAAQ,aAAa,GAAG,CAAC,CAAC;AAAA,YAC3B,CAAC,QAAQ,WAAW,GAAG,CAAC,EAAE,YAAY;AAAA,UACxC;AAAA,UACA;AAAA,QACF;AAAA,QACA,SAAQ;AAAA,QACR,WAAU;AAAA,QACV,SAAS;AAAA,QACR,GAAG;AAAA,QAEH,UAAA;AAAA,UAAA;AAAA,UACA,iBAAiB,oBAAC,QAAK,EAAA,eAAY,QAAO,UAAC,KAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAC9C;AAAA,IACC;AAAA,EACH,EAAA,CAAA;AAEJ;"}