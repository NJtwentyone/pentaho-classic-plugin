"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const css = require("@emotion/css");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useDefaultProps = require("../hooks/useDefaultProps.cjs");
const AvatarGroup_styles = require("./AvatarGroup.styles.cjs");
const Avatar = require("../Avatar/Avatar.cjs");
const getSpacingValue = (spacing, size) => {
  switch (size) {
    case "xs":
      return spacing === "compact" ? 24 : 16;
    case "sm":
      return spacing === "compact" ? 30 : 18;
    case "md":
      return spacing === "compact" ? 36 : 20;
    case "lg":
      return spacing === "compact" ? 44 : 24;
    case "xl":
      return spacing === "compact" ? 72 : 34;
    default:
      return spacing === "compact" ? 30 : 18;
  }
};
const HvAvatarGroup = React.forwardRef(
  (props, ref) => {
    const {
      className,
      classes: classesProp,
      children,
      size = "sm",
      spacing = "loose",
      direction = "row",
      toBack = true,
      maxVisible = 3,
      overflowComponent,
      ...others
    } = useDefaultProps.useDefaultProps("HvAvatarGroup", props);
    const { classes, cx } = AvatarGroup_styles.useClasses(classesProp);
    const spacingValue = getSpacingValue(spacing, size);
    const totalChildren = React.Children.count(children);
    const zIndexMultiplier = toBack ? -1 : 1;
    const willOverflow = totalChildren > maxVisible;
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        className: cx(classes.root, classes[direction], className),
        ref,
        ...others,
        children: [
          React.Children.map(children, (child, index) => {
            if (index < maxVisible) {
              return React.cloneElement(child, {
                style: {
                  zIndex: 100 + index * zIndexMultiplier
                },
                classes: {
                  container: css.css({
                    marginLeft: direction === "row" ? index !== 0 ? -spacingValue : 0 : 0,
                    marginTop: direction === "column" ? index !== 0 ? -spacingValue : 0 : 0
                  })
                },
                size
              });
            }
          }),
          willOverflow && /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              style: {
                marginLeft: direction === "row" ? -spacingValue : 0,
                marginTop: direction === "column" ? -spacingValue : 0,
                zIndex: 100 + maxVisible * zIndexMultiplier
              },
              children: overflowComponent ? overflowComponent(totalChildren - maxVisible) : /* @__PURE__ */ jsxRuntime.jsxs(
                Avatar.HvAvatar,
                {
                  size,
                  backgroundColor: uikitStyles.theme.colors.atmo4,
                  classes: {
                    avatar: css.css({
                      [`&.HvAvatar-${size}`]: {
                        fontSize: "unset"
                      }
                    })
                  },
                  children: [
                    "+",
                    totalChildren - maxVisible
                  ]
                }
              )
            }
          )
        ]
      }
    );
  }
);
exports.avatarGroupClasses = AvatarGroup_styles.staticClasses;
exports.HvAvatarGroup = HvAvatarGroup;
