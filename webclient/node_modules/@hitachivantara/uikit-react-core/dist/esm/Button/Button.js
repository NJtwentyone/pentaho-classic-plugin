import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useTheme } from "../hooks/useTheme.js";
import { useDefaultProps } from "../hooks/useDefaultProps.js";
import { fixedForwardRef } from "../types/generic.js";
import { useClasses, getSizeStyles, getRadiusStyles, getOverrideColors } from "./Button.styles.js";
import { staticClasses } from "./Button.styles.js";
const mapVariant = (variant, theme) => {
  if (theme === "ds3")
    return variant;
  const deprecatedVariantMap = {
    secondary: "secondarySubtle",
    ghost: "primaryGhost"
  };
  const mappedVariant = deprecatedVariantMap[variant];
  return mappedVariant || variant;
};
const HvButton = fixedForwardRef(function HvButton2(props, ref) {
  const {
    classes: classesProp,
    children,
    variant: variantProp,
    disabled = false,
    className,
    startIcon,
    endIcon,
    icon = false,
    size,
    radius,
    overrideIconColors = true,
    component: Component = "button",
    focusableWhenDisabled,
    onClick: onClickProp,
    onMouseDown: onMouseDownProp,
    ...others
  } = useDefaultProps("HvButton", props);
  const { classes, css, cx } = useClasses(classesProp);
  const { activeTheme } = useTheme();
  const variant = mapVariant(
    variantProp ?? (icon ? "secondaryGhost" : "primary"),
    activeTheme?.name
  );
  const handleClick = (e) => {
    if (disabled)
      return;
    onClickProp?.(e);
  };
  const handleMouseDown = (e) => {
    if (disabled)
      return;
    onMouseDownProp?.(e);
  };
  return /* @__PURE__ */ jsxs(
    Component,
    {
      ref,
      className: cx(
        classes.root,
        classes[variant],
        size && css(getSizeStyles(size)),
        radius && css(getRadiusStyles(radius)),
        overrideIconColors && css(getOverrideColors()),
        {
          [classes.icon]: icon,
          [classes.disabled]: disabled
        },
        className
      ),
      onClick: handleClick,
      onMouseDown: handleMouseDown,
      ...Component === "button" && { type: "button" },
      ...disabled && {
        disabled: !focusableWhenDisabled,
        tabIndex: focusableWhenDisabled ? 0 : -1,
        "aria-disabled": true
      },
      ...others,
      children: [
        startIcon && /* @__PURE__ */ jsx("span", { className: classes.startIcon, children: startIcon }),
        children,
        endIcon && /* @__PURE__ */ jsx("span", { className: classes.endIcon, children: endIcon })
      ]
    }
  );
});
export {
  HvButton,
  staticClasses as buttonClasses
};
