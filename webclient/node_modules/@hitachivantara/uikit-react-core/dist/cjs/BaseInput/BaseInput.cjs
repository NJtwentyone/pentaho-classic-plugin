"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const MuiInput = require("@mui/material/Input");
const react = require("@emotion/react");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useDefaultProps = require("../hooks/useDefaultProps.cjs");
const BaseInput_styles = require("./BaseInput.styles.cjs");
const FormUtils = require("../Forms/FormElement/utils/FormUtils.cjs");
const FormElementContext = require("../Forms/FormElement/context/FormElementContext.cjs");
const FormElementDescriptorsContext = require("../Forms/FormElement/context/FormElementDescriptorsContext.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiInput__default = /* @__PURE__ */ _interopDefault(MuiInput);
const baseInputStyles = react.css({
  "input:-webkit-autofill": {
    WebkitBoxShadow: `0 0 0px 1000px ${uikitStyles.theme.colors.atmo1} inset`,
    WebkitTextFillColor: uikitStyles.theme.colors.secondary
  },
  // Clears number input up/down arrows in Chrome and Firefox
  "input::-webkit-outer-spin-button,input::-webkit-inner-spin-button": {
    WebkitAppearance: "none",
    margin: 0
  },
  "input[type=number]": {
    MozAppearance: "textfield"
  },
  // Clears time input clock in Chrome
  "input::-webkit-calendar-picker-indicator": {
    display: "none"
  },
  // Clears search input clear button in Chrome
  "input::-webkit-search-decoration,input::-webkit-search-cancel-button,input::-webkit-search-results-button,input::-webkit-search-results-decoration": {
    display: "none"
  }
});
const HvBaseInput = (props) => {
  const {
    classes: classesProp,
    className = "",
    id,
    name,
    value,
    defaultValue,
    required,
    readOnly,
    disabled,
    onChange,
    type = "text",
    placeholder,
    multiline = false,
    resizable = false,
    invalid = false,
    inputRef,
    inputProps = {},
    ...others
  } = useDefaultProps.useDefaultProps("HvBaseInput", props);
  const { classes, cx } = BaseInput_styles.useClasses(classesProp);
  const formElementContext = React.useContext(FormElementContext.HvFormElementContext);
  const formElementProps = FormUtils.buildFormElementPropsFromContext(
    name,
    disabled,
    readOnly,
    required,
    formElementContext
  );
  const localInvalid = invalid || formElementProps.status === "invalid";
  const formElementDescriptorsContext = React.useContext(
    FormElementDescriptorsContext.HvFormElementDescriptorsContext
  );
  const ariaProps = FormUtils.buildAriaPropsFromContext(
    inputProps,
    formElementDescriptorsContext,
    localInvalid,
    id
  );
  const onChangeHandler = (event) => {
    onChange?.(event, event.target.value);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(react.Global, { styles: baseInputStyles }),
    /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        className: cx(classes.root, className, {
          [classes.disabled]: formElementProps.disabled,
          [classes.invalid]: localInvalid,
          [classes.resizable]: multiline && resizable,
          [classes.readOnly]: formElementProps.readOnly
        }),
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            MuiInput__default.default,
            {
              id,
              name: formElementProps.name,
              value,
              defaultValue,
              type,
              placeholder,
              readOnly: !!formElementProps.readOnly,
              disabled: formElementProps.disabled,
              onChange: onChangeHandler,
              className: cx({
                [classes.inputRootInvalid]: localInvalid,
                [classes.inputRootReadOnly]: formElementProps.readOnly
              }),
              classes: {
                root: classes.inputRoot,
                focused: classes.inputRootFocused,
                disabled: classes.inputRootDisabled,
                multiline: classes.inputRootMultiline,
                input: cx(classes.input, {
                  [classes.inputResizable]: !formElementProps.disabled && resizable,
                  [classes.inputDisabled]: formElementProps.disabled,
                  [classes.inputReadOnly]: formElementProps.readOnly
                })
              },
              inputProps: {
                // Avoid the required attribute at the root node
                required: formElementProps.required,
                ...inputProps,
                ...ariaProps
              },
              inputRef,
              multiline,
              rows: 10,
              ...others
            }
          ),
          !multiline && /* @__PURE__ */ jsxRuntime.jsx("div", { role: "presentation", className: classes.inputBorderContainer })
        ]
      }
    )
  ] });
};
exports.baseInputClasses = BaseInput_styles.staticClasses;
exports.HvBaseInput = HvBaseInput;
