"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const styled = require("@emotion/styled");
const uikitStyles = require("@hitachivantara/uikit-styles");
const utils = require("./utils.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const styled__default = /* @__PURE__ */ _interopDefault(styled);
const getDims = (size) => ({ width: size, height: size });
const getColorVars = (colorArray) => {
  return colorArray.reduce((acc, value, index) => {
    acc[`--color-${index}`] = value;
    return acc;
  }, {});
};
const getIconSize = (iconSize, hasSpecialSize, width, height) => {
  if (width && height)
    return { width, height };
  const calcSize = (size) => hasSpecialSize ? size + 8 : size;
  switch (iconSize) {
    case "XS":
      return getDims(calcSize(12));
    default:
    case "S":
      return getDims(calcSize(16));
    case "M":
      return getDims(calcSize(32));
    case "L":
      return getDims(calcSize(96));
  }
};
const getIconColors = (palette = [], color, semantic, inverted = false) => {
  const colorArray = palette;
  if (typeof color === "string") {
    colorArray[0] = uikitStyles.getColor(color);
  } else if (Array.isArray(color)) {
    colorArray.forEach((_, i) => {
      colorArray[i] = uikitStyles.getColor(color[i]);
    });
  }
  if (semantic) {
    colorArray[0] = uikitStyles.theme.colors?.[semantic] || colorArray[0];
  }
  if (inverted && colorArray[1]) {
    colorArray[1] = colorArray[0];
    colorArray[0] = "none";
  }
  return colorArray;
};
const splitIconProps = (iconName, props) => {
  const {
    role,
    title,
    iconSize: iconSizeProp,
    width,
    height,
    svgProps,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    ...rest
  } = props;
  const iconSize = iconSizeProp ?? (utils.isXS(iconName) ? "XS" : "S");
  const size = getIconSize(iconSize, utils.isSemantic(iconName), width, height);
  const newSvgProps = {
    focusable: false,
    // pass size props
    ...size,
    // pass a11y props
    title,
    role,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    // pass all other `svgProps`
    ...svgProps
  };
  const newOtherProps = {
    iconSize,
    ...rest
  };
  return [newSvgProps, newOtherProps];
};
const StyledIconBase = styled__default.default("div")(
  ({ iconSize }) => ({
    display: "flex",
    "& svg": {
      margin: "auto",
      color: "inherit"
    },
    ...iconSize === "XS" && getDims(32),
    ...iconSize === "S" && getDims(32),
    ...iconSize === "M" && getDims(48),
    ...iconSize === "L" && getDims(112)
  })
);
const IconBase = ({
  children,
  palette,
  height,
  width,
  color,
  semantic,
  inverted = false,
  iconSize = "S",
  iconName,
  style,
  ...others
}) => {
  const colorArray = getIconColors(palette, color, semantic, inverted);
  const colorVars = getColorVars(colorArray);
  return /* @__PURE__ */ jsxRuntime.jsx(
    StyledIconBase,
    {
      "data-name": iconName,
      iconSize,
      style: { ...colorVars, ...style },
      ...others,
      children
    }
  );
};
exports.IconBase = IconBase;
exports.StyledIconBase = StyledIconBase;
exports.getColorVars = getColorVars;
exports.getIconColors = getIconColors;
exports.getIconSize = getIconSize;
exports.splitIconProps = splitIconProps;
