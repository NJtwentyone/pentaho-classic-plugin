import { jsx, jsxs, Fragment } from "@emotion/react/jsx-runtime";
import { isValidElement } from "react";
import { MoreOptionsVertical } from "@hitachivantara/uikit-react-icons";
import { useDefaultProps } from "../hooks/useDefaultProps.js";
import { setId } from "../utils/setId.js";
import { useClasses } from "./ActionsGeneric.styles.js";
import { staticClasses } from "./ActionsGeneric.styles.js";
import { HvButton } from "../Button/Button.js";
import { HvDropDownMenu } from "../DropDownMenu/DropDownMenu.js";
const HvActionsGeneric = (props) => {
  const {
    id,
    classes: classesProp,
    className,
    category = "secondaryGhost",
    disabled = false,
    actions = [],
    actionsCallback,
    maxVisibleActions = Infinity,
    ...others
  } = useDefaultProps("HvActionsGeneric", props);
  const { classes, cx } = useClasses(classesProp);
  if (!Array.isArray(actions))
    return isValidElement(actions) ? actions : null;
  const renderButton = (action, idx) => {
    const { disabled: actDisabled, id: actId, icon, label, ...other } = action;
    const actionId = setId(id, idx, "action", action.id);
    const renderedIcon = isValidElement(icon) ? icon : icon?.({ isDisabled: disabled });
    return /* @__PURE__ */ jsx(
      HvButton,
      {
        id: actionId,
        variant: category,
        className: classes.button,
        disabled: actDisabled ?? disabled,
        onClick: (event) => actionsCallback?.(event, id || "", action),
        startIcon: renderedIcon,
        ...other,
        children: label
      },
      actionId || idx
    );
  };
  const renderActionsGrid = () => {
    const actsVisible = actions.slice(0, maxVisibleActions);
    const actsDropdown = actions.slice(maxVisibleActions);
    const semantic = category === "semantic";
    const iconColor = disabled && "secondary_60" || semantic && "base_dark" || void 0;
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      actsVisible.map((action, idx) => renderButton(action, idx)),
      /* @__PURE__ */ jsx(
        HvDropDownMenu,
        {
          id: setId(id, "menu"),
          disabled,
          category,
          classes: {
            root: classes.dropDownMenu,
            icon: classes.dropDownMenuButton,
            iconSelected: classes.dropDownMenuButtonSelected
          },
          icon: /* @__PURE__ */ jsx(MoreOptionsVertical, { color: iconColor }),
          placement: "left",
          onClick: (event, action) => actionsCallback?.(event, id || "", action),
          dataList: actsDropdown,
          keepOpened: false,
          disablePortal: false
        }
      )
    ] });
  };
  const actionOverflow = actions.length > maxVisibleActions;
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: cx(
        classes.root,
        { [classes.actionContainer]: actionOverflow },
        className
      ),
      ...others,
      children: actionOverflow ? renderActionsGrid() : actions.map((action, idx) => renderButton(action, idx))
    }
  );
};
export {
  HvActionsGeneric,
  staticClasses as actionsGenericClasses
};
