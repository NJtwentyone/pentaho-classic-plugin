import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useContext } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { HvFilterGroupContext } from "../FilterGroupContext.js";
import { useClasses } from "./Counter.styles.js";
import { staticClasses } from "./Counter.styles.js";
const getExistingFiltersById = (idx, filterValues, filterOptions) => {
  let total = 0;
  filterValues[idx]?.forEach((fv) => {
    if (filterOptions[idx]?.data.find((f) => f.id === fv)) {
      total += 1;
    }
  });
  return total;
};
const HvFilterGroupCounter = (props) => {
  const {
    className,
    id,
    classes: classesProp
  } = useDefaultProps("HvFilterGroupCounter", props);
  const { classes, cx } = useClasses(classesProp);
  const {
    filterOptions,
    filterValues = [],
    appliedFilters = []
  } = useContext(HvFilterGroupContext);
  const options = id && filterOptions.find((option) => option.id === id) ? [
    filterOptions.find((option) => option.id === id)
  ] : filterOptions;
  const optionIdx = filterOptions.findIndex((option) => option.id === id);
  let groupsCounter = 0;
  appliedFilters.forEach((fg, i) => {
    groupsCounter += getExistingFiltersById(i, filterValues, filterOptions);
  });
  const partialCounter = id ? getExistingFiltersById(optionIdx, filterValues, filterOptions) || 0 : groupsCounter;
  const totalCounter = options.reduce(
    (acc, option) => acc + option.data.length,
    0
  );
  return /* @__PURE__ */ jsxs("div", { className: cx(classes.root, className), children: [
    partialCounter > 0 ? /* @__PURE__ */ jsx("p", { className: classes.partialCounter, children: partialCounter }) : partialCounter,
    ` / ${totalCounter}`
  ] });
};
export {
  HvFilterGroupCounter,
  staticClasses as filterGroupCounterClasses
};
